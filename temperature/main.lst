                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Temperature_Process
                                     13 	.globl _ReadTemperature
                                     14 	.globl _WriteOneByte
                                     15 	.globl _ReadOneByte
                                     16 	.globl _Init_DS18B20
                                     17 	.globl _DisplayDigits
                                     18 	.globl _DelayXus
                                     19 	.globl _delay
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _F1
                                     27 	.globl _P
                                     28 	.globl _PS
                                     29 	.globl _PT1
                                     30 	.globl _PX1
                                     31 	.globl _PT0
                                     32 	.globl _PX0
                                     33 	.globl _RD
                                     34 	.globl _WR
                                     35 	.globl _T1
                                     36 	.globl _T0
                                     37 	.globl _INT1
                                     38 	.globl _INT0
                                     39 	.globl _TXD
                                     40 	.globl _RXD
                                     41 	.globl _P3_7
                                     42 	.globl _P3_6
                                     43 	.globl _P3_5
                                     44 	.globl _P3_4
                                     45 	.globl _P3_3
                                     46 	.globl _P3_2
                                     47 	.globl _P3_1
                                     48 	.globl _P3_0
                                     49 	.globl _EA
                                     50 	.globl _ES
                                     51 	.globl _ET1
                                     52 	.globl _EX1
                                     53 	.globl _ET0
                                     54 	.globl _EX0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _SM0
                                     64 	.globl _SM1
                                     65 	.globl _SM2
                                     66 	.globl _REN
                                     67 	.globl _TB8
                                     68 	.globl _RB8
                                     69 	.globl _TI
                                     70 	.globl _RI
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _TF1
                                     80 	.globl _TR1
                                     81 	.globl _TF0
                                     82 	.globl _TR0
                                     83 	.globl _IE1
                                     84 	.globl _IT1
                                     85 	.globl _IE0
                                     86 	.globl _IT0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _B
                                     96 	.globl _ACC
                                     97 	.globl _PSW
                                     98 	.globl _IP
                                     99 	.globl _P3
                                    100 	.globl _IE
                                    101 	.globl _P2
                                    102 	.globl _SBUF
                                    103 	.globl _SCON
                                    104 	.globl _P1
                                    105 	.globl _TH1
                                    106 	.globl _TH0
                                    107 	.globl _TL1
                                    108 	.globl _TL0
                                    109 	.globl _TMOD
                                    110 	.globl _TCON
                                    111 	.globl _PCON
                                    112 	.globl _DPH
                                    113 	.globl _DPL
                                    114 	.globl _SP
                                    115 	.globl _P0
                                    116 	.globl _DS18B20_IS_OK
                                    117 	.globl _Temp_Value
                                    118 	.globl _CurrentT
                                    119 	.globl _Display
                                    120 	.globl _smgduan
                                    121 ;--------------------------------------------------------
                                    122 ; special function registers
                                    123 ;--------------------------------------------------------
                                    124 	.area RSEG    (ABS,DATA)
      000000                        125 	.org 0x0000
                           000080   126 _P0	=	0x0080
                           000081   127 _SP	=	0x0081
                           000082   128 _DPL	=	0x0082
                           000083   129 _DPH	=	0x0083
                           000087   130 _PCON	=	0x0087
                           000088   131 _TCON	=	0x0088
                           000089   132 _TMOD	=	0x0089
                           00008A   133 _TL0	=	0x008a
                           00008B   134 _TL1	=	0x008b
                           00008C   135 _TH0	=	0x008c
                           00008D   136 _TH1	=	0x008d
                           000090   137 _P1	=	0x0090
                           000098   138 _SCON	=	0x0098
                           000099   139 _SBUF	=	0x0099
                           0000A0   140 _P2	=	0x00a0
                           0000A8   141 _IE	=	0x00a8
                           0000B0   142 _P3	=	0x00b0
                           0000B8   143 _IP	=	0x00b8
                           0000D0   144 _PSW	=	0x00d0
                           0000E0   145 _ACC	=	0x00e0
                           0000F0   146 _B	=	0x00f0
                                    147 ;--------------------------------------------------------
                                    148 ; special function bits
                                    149 ;--------------------------------------------------------
                                    150 	.area RSEG    (ABS,DATA)
      000000                        151 	.org 0x0000
                           000080   152 _P0_0	=	0x0080
                           000081   153 _P0_1	=	0x0081
                           000082   154 _P0_2	=	0x0082
                           000083   155 _P0_3	=	0x0083
                           000084   156 _P0_4	=	0x0084
                           000085   157 _P0_5	=	0x0085
                           000086   158 _P0_6	=	0x0086
                           000087   159 _P0_7	=	0x0087
                           000088   160 _IT0	=	0x0088
                           000089   161 _IE0	=	0x0089
                           00008A   162 _IT1	=	0x008a
                           00008B   163 _IE1	=	0x008b
                           00008C   164 _TR0	=	0x008c
                           00008D   165 _TF0	=	0x008d
                           00008E   166 _TR1	=	0x008e
                           00008F   167 _TF1	=	0x008f
                           000090   168 _P1_0	=	0x0090
                           000091   169 _P1_1	=	0x0091
                           000092   170 _P1_2	=	0x0092
                           000093   171 _P1_3	=	0x0093
                           000094   172 _P1_4	=	0x0094
                           000095   173 _P1_5	=	0x0095
                           000096   174 _P1_6	=	0x0096
                           000097   175 _P1_7	=	0x0097
                           000098   176 _RI	=	0x0098
                           000099   177 _TI	=	0x0099
                           00009A   178 _RB8	=	0x009a
                           00009B   179 _TB8	=	0x009b
                           00009C   180 _REN	=	0x009c
                           00009D   181 _SM2	=	0x009d
                           00009E   182 _SM1	=	0x009e
                           00009F   183 _SM0	=	0x009f
                           0000A0   184 _P2_0	=	0x00a0
                           0000A1   185 _P2_1	=	0x00a1
                           0000A2   186 _P2_2	=	0x00a2
                           0000A3   187 _P2_3	=	0x00a3
                           0000A4   188 _P2_4	=	0x00a4
                           0000A5   189 _P2_5	=	0x00a5
                           0000A6   190 _P2_6	=	0x00a6
                           0000A7   191 _P2_7	=	0x00a7
                           0000A8   192 _EX0	=	0x00a8
                           0000A9   193 _ET0	=	0x00a9
                           0000AA   194 _EX1	=	0x00aa
                           0000AB   195 _ET1	=	0x00ab
                           0000AC   196 _ES	=	0x00ac
                           0000AF   197 _EA	=	0x00af
                           0000B0   198 _P3_0	=	0x00b0
                           0000B1   199 _P3_1	=	0x00b1
                           0000B2   200 _P3_2	=	0x00b2
                           0000B3   201 _P3_3	=	0x00b3
                           0000B4   202 _P3_4	=	0x00b4
                           0000B5   203 _P3_5	=	0x00b5
                           0000B6   204 _P3_6	=	0x00b6
                           0000B7   205 _P3_7	=	0x00b7
                           0000B0   206 _RXD	=	0x00b0
                           0000B1   207 _TXD	=	0x00b1
                           0000B2   208 _INT0	=	0x00b2
                           0000B3   209 _INT1	=	0x00b3
                           0000B4   210 _T0	=	0x00b4
                           0000B5   211 _T1	=	0x00b5
                           0000B6   212 _WR	=	0x00b6
                           0000B7   213 _RD	=	0x00b7
                           0000B8   214 _PX0	=	0x00b8
                           0000B9   215 _PT0	=	0x00b9
                           0000BA   216 _PX1	=	0x00ba
                           0000BB   217 _PT1	=	0x00bb
                           0000BC   218 _PS	=	0x00bc
                           0000D0   219 _P	=	0x00d0
                           0000D1   220 _F1	=	0x00d1
                           0000D2   221 _OV	=	0x00d2
                           0000D3   222 _RS0	=	0x00d3
                           0000D4   223 _RS1	=	0x00d4
                           0000D5   224 _F0	=	0x00d5
                           0000D6   225 _AC	=	0x00d6
                           0000D7   226 _CY	=	0x00d7
                                    227 ;--------------------------------------------------------
                                    228 ; overlayable register banks
                                    229 ;--------------------------------------------------------
                                    230 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        231 	.ds 8
                                    232 ;--------------------------------------------------------
                                    233 ; internal ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area DSEG    (DATA)
      000000                        236 _smgduan::
      000000                        237 	.ds 16
      000010                        238 _Display::
      000010                        239 	.ds 8
      000018                        240 _CurrentT::
      000018                        241 	.ds 1
      000019                        242 _Temp_Value::
      000019                        243 	.ds 2
      00001B                        244 _DS18B20_IS_OK::
      00001B                        245 	.ds 1
                                    246 ;--------------------------------------------------------
                                    247 ; overlayable items in internal ram 
                                    248 ;--------------------------------------------------------
                                    249 	.area	OSEG    (OVR,DATA)
                                    250 	.area	OSEG    (OVR,DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; Stack segment in internal ram 
                                    253 ;--------------------------------------------------------
                                    254 	.area	SSEG
      000000                        255 __start__stack:
      000000                        256 	.ds	1
                                    257 
                                    258 ;--------------------------------------------------------
                                    259 ; indirectly addressable internal ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area ISEG    (DATA)
                                    262 ;--------------------------------------------------------
                                    263 ; absolute internal ram data
                                    264 ;--------------------------------------------------------
                                    265 	.area IABS    (ABS,DATA)
                                    266 	.area IABS    (ABS,DATA)
                                    267 ;--------------------------------------------------------
                                    268 ; bit data
                                    269 ;--------------------------------------------------------
                                    270 	.area BSEG    (BIT)
                                    271 ;--------------------------------------------------------
                                    272 ; paged external ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area PSEG    (PAG,XDATA)
                                    275 ;--------------------------------------------------------
                                    276 ; external ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area XSEG    (XDATA)
                                    279 ;--------------------------------------------------------
                                    280 ; absolute external ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area XABS    (ABS,XDATA)
                                    283 ;--------------------------------------------------------
                                    284 ; external initialized ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area XISEG   (XDATA)
                                    287 	.area HOME    (CODE)
                                    288 	.area GSINIT0 (CODE)
                                    289 	.area GSINIT1 (CODE)
                                    290 	.area GSINIT2 (CODE)
                                    291 	.area GSINIT3 (CODE)
                                    292 	.area GSINIT4 (CODE)
                                    293 	.area GSINIT5 (CODE)
                                    294 	.area GSINIT  (CODE)
                                    295 	.area GSFINAL (CODE)
                                    296 	.area CSEG    (CODE)
                                    297 ;--------------------------------------------------------
                                    298 ; interrupt vector 
                                    299 ;--------------------------------------------------------
                                    300 	.area HOME    (CODE)
      000000                        301 __interrupt_vect:
      000000 02r00r00         [24]  302 	ljmp	__sdcc_gsinit_startup
                                    303 ;--------------------------------------------------------
                                    304 ; global & static initialisations
                                    305 ;--------------------------------------------------------
                                    306 	.area HOME    (CODE)
                                    307 	.area GSINIT  (CODE)
                                    308 	.area GSFINAL (CODE)
                                    309 	.area GSINIT  (CODE)
                                    310 	.globl __sdcc_gsinit_startup
                                    311 	.globl __sdcc_program_startup
                                    312 	.globl __start__stack
                                    313 	.globl __mcs51_genXINIT
                                    314 	.globl __mcs51_genXRAMCLEAR
                                    315 	.globl __mcs51_genRAMCLEAR
                                    316 ;	main.c:26: uchar smgduan[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 
      000000 75*00 3F         [24]  317 	mov	_smgduan,#0x3f
      000003 75*01 06         [24]  318 	mov	(_smgduan + 0x0001),#0x06
      000006 75*02 5B         [24]  319 	mov	(_smgduan + 0x0002),#0x5b
      000009 75*03 4F         [24]  320 	mov	(_smgduan + 0x0003),#0x4f
      00000C 75*04 66         [24]  321 	mov	(_smgduan + 0x0004),#0x66
      00000F 75*05 6D         [24]  322 	mov	(_smgduan + 0x0005),#0x6d
      000012 75*06 7D         [24]  323 	mov	(_smgduan + 0x0006),#0x7d
      000015 75*07 07         [24]  324 	mov	(_smgduan + 0x0007),#0x07
      000018 75*08 7F         [24]  325 	mov	(_smgduan + 0x0008),#0x7f
      00001B 75*09 6F         [24]  326 	mov	(_smgduan + 0x0009),#0x6f
      00001E 75*0A 77         [24]  327 	mov	(_smgduan + 0x000a),#0x77
      000021 75*0B 7C         [24]  328 	mov	(_smgduan + 0x000b),#0x7c
      000024 75*0C 39         [24]  329 	mov	(_smgduan + 0x000c),#0x39
      000027 75*0D 5E         [24]  330 	mov	(_smgduan + 0x000d),#0x5e
      00002A 75*0E 79         [24]  331 	mov	(_smgduan + 0x000e),#0x79
      00002D 75*0F 71         [24]  332 	mov	(_smgduan + 0x000f),#0x71
                                    333 ;	main.c:28: uchar Display[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      000030 75*10 00         [24]  334 	mov	_Display,#0x00
      000033 75*11 00         [24]  335 	mov	(_Display + 0x0001),#0x00
      000036 75*12 00         [24]  336 	mov	(_Display + 0x0002),#0x00
      000039 75*13 00         [24]  337 	mov	(_Display + 0x0003),#0x00
      00003C 75*14 00         [24]  338 	mov	(_Display + 0x0004),#0x00
      00003F 75*15 00         [24]  339 	mov	(_Display + 0x0005),#0x00
      000042 75*16 00         [24]  340 	mov	(_Display + 0x0006),#0x00
      000045 75*17 00         [24]  341 	mov	(_Display + 0x0007),#0x00
                                    342 ;	main.c:45: uchar CurrentT = 0;
      000048 75*18 00         [24]  343 	mov	_CurrentT,#0x00
                                    344 ;	main.c:46: uchar Temp_Value[] = {0x00, 0x00};
      00004B 75*19 00         [24]  345 	mov	_Temp_Value,#0x00
      00004E 75*1A 00         [24]  346 	mov	(_Temp_Value + 0x0001),#0x00
                                    347 ;	main.c:47: uchar DS18B20_IS_OK = 1;
      000051 75*1B 01         [24]  348 	mov	_DS18B20_IS_OK,#0x01
                                    349 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  350 	ljmp	__sdcc_program_startup
                                    351 ;--------------------------------------------------------
                                    352 ; Home
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area HOME    (CODE)
      000003                        356 __sdcc_program_startup:
      000003 02r03r39         [24]  357 	ljmp	_main
                                    358 ;	return from main will return to caller
                                    359 ;--------------------------------------------------------
                                    360 ; code
                                    361 ;--------------------------------------------------------
                                    362 	.area CSEG    (CODE)
                                    363 ;------------------------------------------------------------
                                    364 ;Allocation info for local variables in function 'delay'
                                    365 ;------------------------------------------------------------
                                    366 ;i                         Allocated to registers 
                                    367 ;------------------------------------------------------------
                                    368 ;	main.c:8: void delay(uint i)
                                    369 ;	-----------------------------------------
                                    370 ;	 function delay
                                    371 ;	-----------------------------------------
      000000                        372 _delay:
                           000007   373 	ar7 = 0x07
                           000006   374 	ar6 = 0x06
                           000005   375 	ar5 = 0x05
                           000004   376 	ar4 = 0x04
                           000003   377 	ar3 = 0x03
                           000002   378 	ar2 = 0x02
                           000001   379 	ar1 = 0x01
                           000000   380 	ar0 = 0x00
      000000 AE 82            [24]  381 	mov	r6,dpl
      000002 AF 83            [24]  382 	mov	r7,dph
                                    383 ;	main.c:10: while(i--);
      000004                        384 00101$:
      000004 8E 04            [24]  385 	mov	ar4,r6
      000006 8F 05            [24]  386 	mov	ar5,r7
      000008 1E               [12]  387 	dec	r6
      000009 BE FF 01         [24]  388 	cjne	r6,#0xff,00111$
      00000C 1F               [12]  389 	dec	r7
      00000D                        390 00111$:
      00000D EC               [12]  391 	mov	a,r4
      00000E 4D               [12]  392 	orl	a,r5
      00000F 70 F3            [24]  393 	jnz	00101$
                                    394 ;	main.c:11: }
      000011 22               [24]  395 	ret
                                    396 ;------------------------------------------------------------
                                    397 ;Allocation info for local variables in function 'DelayXus'
                                    398 ;------------------------------------------------------------
                                    399 ;x                         Allocated to registers 
                                    400 ;i                         Allocated to registers r5 
                                    401 ;------------------------------------------------------------
                                    402 ;	main.c:13: void DelayXus(uint x)
                                    403 ;	-----------------------------------------
                                    404 ;	 function DelayXus
                                    405 ;	-----------------------------------------
      000012                        406 _DelayXus:
      000012 AE 82            [24]  407 	mov	r6,dpl
      000014 AF 83            [24]  408 	mov	r7,dph
                                    409 ;	main.c:16: while(x--)
      000016                        410 00102$:
      000016 8E 04            [24]  411 	mov	ar4,r6
      000018 8F 05            [24]  412 	mov	ar5,r7
      00001A 1E               [12]  413 	dec	r6
      00001B BE FF 01         [24]  414 	cjne	r6,#0xff,00127$
      00001E 1F               [12]  415 	dec	r7
      00001F                        416 00127$:
      00001F EC               [12]  417 	mov	a,r4
      000020 4D               [12]  418 	orl	a,r5
      000021 60 0A            [24]  419 	jz	00108$
                                    420 ;	main.c:18: for(i=0;i<100;i++);
      000023 7D 64            [12]  421 	mov	r5,#0x64
      000025                        422 00107$:
      000025 ED               [12]  423 	mov	a,r5
      000026 14               [12]  424 	dec	a
      000027 FC               [12]  425 	mov	r4,a
      000028 FD               [12]  426 	mov	r5,a
      000029 70 FA            [24]  427 	jnz	00107$
      00002B 80 E9            [24]  428 	sjmp	00102$
      00002D                        429 00108$:
                                    430 ;	main.c:20: }
      00002D 22               [24]  431 	ret
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'DisplayDigits'
                                    434 ;------------------------------------------------------------
                                    435 ;i                         Allocated to registers r7 
                                    436 ;------------------------------------------------------------
                                    437 ;	main.c:29: void DisplayDigits()
                                    438 ;	-----------------------------------------
                                    439 ;	 function DisplayDigits
                                    440 ;	-----------------------------------------
      00002E                        441 _DisplayDigits:
                                    442 ;	main.c:32: for(i=0;i<7;i++)
      00002E 7F 00            [12]  443 	mov	r7,#0x00
      000030                        444 00102$:
                                    445 ;	main.c:34: LSC = i / 4;
      000030 8F 05            [24]  446 	mov	ar5,r7
      000032 7E 00            [12]  447 	mov	r6,#0x00
      000034 75*00 04         [24]  448 	mov	__divsint_PARM_2,#0x04
                                    449 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000037 8E*01            [24]  450 	mov	(__divsint_PARM_2 + 1),r6
      000039 8D 82            [24]  451 	mov	dpl,r5
      00003B 8E 83            [24]  452 	mov	dph,r6
      00003D C0 07            [24]  453 	push	ar7
      00003F C0 06            [24]  454 	push	ar6
      000041 C0 05            [24]  455 	push	ar5
      000043 12r00r00         [24]  456 	lcall	__divsint
      000046 AB 82            [24]  457 	mov	r3,dpl
      000048 AC 83            [24]  458 	mov	r4,dph
      00004A D0 05            [24]  459 	pop	ar5
      00004C D0 06            [24]  460 	pop	ar6
                                    461 ;	assignBit
      00004E EB               [12]  462 	mov	a,r3
      00004F 4C               [12]  463 	orl	a,r4
      000050 24 FF            [12]  464 	add	a,#0xff
      000052 92 A4            [24]  465 	mov	_P2_4,c
                                    466 ;	main.c:35: LSB = (i-4*LSC) / 2;
      000054 A2 A4            [12]  467 	mov	c,_P2_4
      000056 E4               [12]  468 	clr	a
      000057 33               [12]  469 	rlc	a
      000058 7C 00            [12]  470 	mov	r4,#0x00
      00005A 25 E0            [12]  471 	add	a,acc
      00005C FB               [12]  472 	mov	r3,a
      00005D EC               [12]  473 	mov	a,r4
      00005E 33               [12]  474 	rlc	a
      00005F FC               [12]  475 	mov	r4,a
      000060 EB               [12]  476 	mov	a,r3
      000061 2B               [12]  477 	add	a,r3
      000062 FB               [12]  478 	mov	r3,a
      000063 EC               [12]  479 	mov	a,r4
      000064 33               [12]  480 	rlc	a
      000065 FC               [12]  481 	mov	r4,a
      000066 ED               [12]  482 	mov	a,r5
      000067 C3               [12]  483 	clr	c
      000068 9B               [12]  484 	subb	a,r3
      000069 F5 82            [12]  485 	mov	dpl,a
      00006B EE               [12]  486 	mov	a,r6
      00006C 9C               [12]  487 	subb	a,r4
      00006D F5 83            [12]  488 	mov	dph,a
      00006F 75*00 02         [24]  489 	mov	__divsint_PARM_2,#0x02
      000072 75*01 00         [24]  490 	mov	(__divsint_PARM_2 + 1),#0x00
      000075 C0 06            [24]  491 	push	ar6
      000077 C0 05            [24]  492 	push	ar5
      000079 12r00r00         [24]  493 	lcall	__divsint
      00007C AB 82            [24]  494 	mov	r3,dpl
      00007E AC 83            [24]  495 	mov	r4,dph
      000080 D0 05            [24]  496 	pop	ar5
      000082 D0 06            [24]  497 	pop	ar6
      000084 D0 07            [24]  498 	pop	ar7
                                    499 ;	assignBit
      000086 EB               [12]  500 	mov	a,r3
      000087 4C               [12]  501 	orl	a,r4
      000088 24 FF            [12]  502 	add	a,#0xff
      00008A 92 A3            [24]  503 	mov	_P2_3,c
                                    504 ;	main.c:36: LSA = i - 4*LSC - 2*LSB;
      00008C A2 A4            [12]  505 	mov	c,_P2_4
      00008E E4               [12]  506 	clr	a
      00008F 33               [12]  507 	rlc	a
      000090 7C 00            [12]  508 	mov	r4,#0x00
      000092 25 E0            [12]  509 	add	a,acc
      000094 FB               [12]  510 	mov	r3,a
      000095 EC               [12]  511 	mov	a,r4
      000096 33               [12]  512 	rlc	a
      000097 FC               [12]  513 	mov	r4,a
      000098 EB               [12]  514 	mov	a,r3
      000099 2B               [12]  515 	add	a,r3
      00009A FB               [12]  516 	mov	r3,a
      00009B EC               [12]  517 	mov	a,r4
      00009C 33               [12]  518 	rlc	a
      00009D FC               [12]  519 	mov	r4,a
      00009E ED               [12]  520 	mov	a,r5
      00009F C3               [12]  521 	clr	c
      0000A0 9B               [12]  522 	subb	a,r3
      0000A1 FD               [12]  523 	mov	r5,a
      0000A2 EE               [12]  524 	mov	a,r6
      0000A3 9C               [12]  525 	subb	a,r4
      0000A4 FE               [12]  526 	mov	r6,a
      0000A5 A2 A3            [12]  527 	mov	c,_P2_3
      0000A7 E4               [12]  528 	clr	a
      0000A8 33               [12]  529 	rlc	a
      0000A9 7C 00            [12]  530 	mov	r4,#0x00
      0000AB 25 E0            [12]  531 	add	a,acc
      0000AD FB               [12]  532 	mov	r3,a
      0000AE EC               [12]  533 	mov	a,r4
      0000AF 33               [12]  534 	rlc	a
      0000B0 FC               [12]  535 	mov	r4,a
      0000B1 ED               [12]  536 	mov	a,r5
      0000B2 C3               [12]  537 	clr	c
      0000B3 9B               [12]  538 	subb	a,r3
      0000B4 FD               [12]  539 	mov	r5,a
      0000B5 EE               [12]  540 	mov	a,r6
      0000B6 9C               [12]  541 	subb	a,r4
                                    542 ;	assignBit
      0000B7 4D               [12]  543 	orl	a,r5
      0000B8 24 FF            [12]  544 	add	a,#0xff
      0000BA 92 A2            [24]  545 	mov	_P2_2,c
                                    546 ;	main.c:37: P0 = Display[i];
      0000BC EF               [12]  547 	mov	a,r7
      0000BD 24r10            [12]  548 	add	a,#_Display
      0000BF F9               [12]  549 	mov	r1,a
      0000C0 87 80            [24]  550 	mov	_P0,@r1
                                    551 ;	main.c:38: delay(200);
      0000C2 90 00 C8         [24]  552 	mov	dptr,#0x00c8
      0000C5 C0 07            [24]  553 	push	ar7
      0000C7 12r00r00         [24]  554 	lcall	_delay
      0000CA D0 07            [24]  555 	pop	ar7
                                    556 ;	main.c:32: for(i=0;i<7;i++)
      0000CC 0F               [12]  557 	inc	r7
      0000CD BF 07 00         [24]  558 	cjne	r7,#0x07,00111$
      0000D0                        559 00111$:
      0000D0 50 03            [24]  560 	jnc	00112$
      0000D2 02r00r30         [24]  561 	ljmp	00102$
      0000D5                        562 00112$:
                                    563 ;	main.c:40: }
      0000D5 22               [24]  564 	ret
                                    565 ;------------------------------------------------------------
                                    566 ;Allocation info for local variables in function 'Init_DS18B20'
                                    567 ;------------------------------------------------------------
                                    568 ;	main.c:49: uchar Init_DS18B20()
                                    569 ;	-----------------------------------------
                                    570 ;	 function Init_DS18B20
                                    571 ;	-----------------------------------------
      0000D6                        572 _Init_DS18B20:
                                    573 ;	main.c:51: DQ = 1;
                                    574 ;	assignBit
      0000D6 D2 B3            [12]  575 	setb	_P3_3
                                    576 ;	main.c:52: delay(8);
      0000D8 90 00 08         [24]  577 	mov	dptr,#0x0008
      0000DB 12r00r00         [24]  578 	lcall	_delay
                                    579 ;	main.c:53: DQ = 0;
                                    580 ;	assignBit
      0000DE C2 B3            [12]  581 	clr	_P3_3
                                    582 ;	main.c:54: delay(50);
      0000E0 90 00 32         [24]  583 	mov	dptr,#0x0032
      0000E3 12r00r00         [24]  584 	lcall	_delay
                                    585 ;	main.c:55: DQ = 1;
                                    586 ;	assignBit
      0000E6 D2 B3            [12]  587 	setb	_P3_3
                                    588 ;	main.c:56: delay(7);
      0000E8 90 00 07         [24]  589 	mov	dptr,#0x0007
      0000EB 12r00r00         [24]  590 	lcall	_delay
                                    591 ;	main.c:57: status = DQ;
                                    592 ;	assignBit
      0000EE A2 B3            [12]  593 	mov	c,_P3_3
      0000F0 92 B2            [24]  594 	mov	_P3_2,c
                                    595 ;	main.c:58: delay(50);
      0000F2 90 00 32         [24]  596 	mov	dptr,#0x0032
      0000F5 12r00r00         [24]  597 	lcall	_delay
                                    598 ;	main.c:59: return status;
      0000F8 A2 B2            [12]  599 	mov	c,_P3_2
      0000FA E4               [12]  600 	clr	a
      0000FB 33               [12]  601 	rlc	a
      0000FC F5 82            [12]  602 	mov	dpl,a
                                    603 ;	main.c:60: }
      0000FE 22               [24]  604 	ret
                                    605 ;------------------------------------------------------------
                                    606 ;Allocation info for local variables in function 'ReadOneByte'
                                    607 ;------------------------------------------------------------
                                    608 ;i                         Allocated to registers r6 
                                    609 ;dat                       Allocated to registers r7 
                                    610 ;------------------------------------------------------------
                                    611 ;	main.c:61: uchar ReadOneByte()
                                    612 ;	-----------------------------------------
                                    613 ;	 function ReadOneByte
                                    614 ;	-----------------------------------------
      0000FF                        615 _ReadOneByte:
                                    616 ;	main.c:63: uchar i, dat=0;
      0000FF 7F 00            [12]  617 	mov	r7,#0x00
                                    618 ;	main.c:64: DQ = 1;
                                    619 ;	assignBit
      000101 D2 B3            [12]  620 	setb	_P3_3
                                    621 ;	main.c:65: delay(1);
      000103 90 00 01         [24]  622 	mov	dptr,#0x0001
      000106 C0 07            [24]  623 	push	ar7
      000108 12r00r00         [24]  624 	lcall	_delay
      00010B D0 07            [24]  625 	pop	ar7
                                    626 ;	main.c:66: for(i=0;i<8;i++)
      00010D 7E 00            [12]  627 	mov	r6,#0x00
      00010F                        628 00104$:
                                    629 ;	main.c:68: DQ = 0;
                                    630 ;	assignBit
      00010F C2 B3            [12]  631 	clr	_P3_3
                                    632 ;	main.c:69: dat >>= 1;
      000111 EF               [12]  633 	mov	a,r7
      000112 C3               [12]  634 	clr	c
      000113 13               [12]  635 	rrc	a
      000114 FF               [12]  636 	mov	r7,a
                                    637 ;	main.c:70: DQ = 1;
                                    638 ;	assignBit
      000115 D2 B3            [12]  639 	setb	_P3_3
                                    640 ;	main.c:73: if(DQ)
      000117 30 B3 09         [24]  641 	jnb	_P3_3,00102$
                                    642 ;	main.c:75: dat |= 0x80;
      00011A 8F 04            [24]  643 	mov	ar4,r7
      00011C 7D 00            [12]  644 	mov	r5,#0x00
      00011E 43 04 80         [24]  645 	orl	ar4,#0x80
      000121 8C 07            [24]  646 	mov	ar7,r4
      000123                        647 00102$:
                                    648 ;	main.c:77: delay(30);
      000123 90 00 1E         [24]  649 	mov	dptr,#0x001e
      000126 C0 07            [24]  650 	push	ar7
      000128 C0 06            [24]  651 	push	ar6
      00012A 12r00r00         [24]  652 	lcall	_delay
      00012D D0 06            [24]  653 	pop	ar6
      00012F D0 07            [24]  654 	pop	ar7
                                    655 ;	main.c:78: DQ = 1;
                                    656 ;	assignBit
      000131 D2 B3            [12]  657 	setb	_P3_3
                                    658 ;	main.c:66: for(i=0;i<8;i++)
      000133 0E               [12]  659 	inc	r6
      000134 BE 08 00         [24]  660 	cjne	r6,#0x08,00122$
      000137                        661 00122$:
      000137 40 D6            [24]  662 	jc	00104$
                                    663 ;	main.c:80: return dat;
      000139 8F 82            [24]  664 	mov	dpl,r7
                                    665 ;	main.c:81: }
      00013B 22               [24]  666 	ret
                                    667 ;------------------------------------------------------------
                                    668 ;Allocation info for local variables in function 'WriteOneByte'
                                    669 ;------------------------------------------------------------
                                    670 ;dat                       Allocated to registers r7 
                                    671 ;i                         Allocated to registers r6 
                                    672 ;------------------------------------------------------------
                                    673 ;	main.c:82: void WriteOneByte(uchar dat)
                                    674 ;	-----------------------------------------
                                    675 ;	 function WriteOneByte
                                    676 ;	-----------------------------------------
      00013C                        677 _WriteOneByte:
      00013C AF 82            [24]  678 	mov	r7,dpl
                                    679 ;	main.c:85: for(i=0;i<8;i++)
      00013E 7E 00            [12]  680 	mov	r6,#0x00
      000140                        681 00102$:
                                    682 ;	main.c:87: DQ = 0;
                                    683 ;	assignBit
      000140 C2 B3            [12]  684 	clr	_P3_3
                                    685 ;	main.c:88: DQ = dat & 0x01;
      000142 EF               [12]  686 	mov	a,r7
      000143 54 01            [12]  687 	anl	a,#0x01
      000145 24 FF            [12]  688 	add	a,#0xff
      000147 92 B3            [24]  689 	mov	_P3_3,c
                                    690 ;	main.c:89: delay(5);
      000149 90 00 05         [24]  691 	mov	dptr,#0x0005
      00014C C0 07            [24]  692 	push	ar7
      00014E C0 06            [24]  693 	push	ar6
      000150 12r00r00         [24]  694 	lcall	_delay
      000153 D0 06            [24]  695 	pop	ar6
      000155 D0 07            [24]  696 	pop	ar7
                                    697 ;	main.c:90: DQ = 1;
                                    698 ;	assignBit
      000157 D2 B3            [12]  699 	setb	_P3_3
                                    700 ;	main.c:91: dat >>= 1;
      000159 EF               [12]  701 	mov	a,r7
      00015A C3               [12]  702 	clr	c
      00015B 13               [12]  703 	rrc	a
      00015C FF               [12]  704 	mov	r7,a
                                    705 ;	main.c:85: for(i=0;i<8;i++)
      00015D 0E               [12]  706 	inc	r6
      00015E BE 08 00         [24]  707 	cjne	r6,#0x08,00111$
      000161                        708 00111$:
      000161 40 DD            [24]  709 	jc	00102$
                                    710 ;	main.c:93: }
      000163 22               [24]  711 	ret
                                    712 ;------------------------------------------------------------
                                    713 ;Allocation info for local variables in function 'ReadTemperature'
                                    714 ;------------------------------------------------------------
                                    715 ;	main.c:94: void ReadTemperature()
                                    716 ;	-----------------------------------------
                                    717 ;	 function ReadTemperature
                                    718 ;	-----------------------------------------
      000164                        719 _ReadTemperature:
                                    720 ;	main.c:96: if(Init_DS18B20())
      000164 12r00rD6         [24]  721 	lcall	_Init_DS18B20
      000167 E5 82            [12]  722 	mov	a,dpl
      000169 60 04            [24]  723 	jz	00102$
                                    724 ;	main.c:97: DS18B20_IS_OK = 0;
      00016B 75*1B 00         [24]  725 	mov	_DS18B20_IS_OK,#0x00
      00016E 22               [24]  726 	ret
      00016F                        727 00102$:
                                    728 ;	main.c:100: WriteOneByte(0xcc);
      00016F 75 82 CC         [24]  729 	mov	dpl,#0xcc
      000172 12r01r3C         [24]  730 	lcall	_WriteOneByte
                                    731 ;	main.c:101: DisplayDigits();
      000175 12r00r2E         [24]  732 	lcall	_DisplayDigits
                                    733 ;	main.c:102: WriteOneByte(0x44);
      000178 75 82 44         [24]  734 	mov	dpl,#0x44
      00017B 12r01r3C         [24]  735 	lcall	_WriteOneByte
                                    736 ;	main.c:103: DisplayDigits();
      00017E 12r00r2E         [24]  737 	lcall	_DisplayDigits
                                    738 ;	main.c:106: Init_DS18B20();
      000181 12r00rD6         [24]  739 	lcall	_Init_DS18B20
                                    740 ;	main.c:107: WriteOneByte(0xcc);
      000184 75 82 CC         [24]  741 	mov	dpl,#0xcc
      000187 12r01r3C         [24]  742 	lcall	_WriteOneByte
                                    743 ;	main.c:108: WriteOneByte(0xbe);
      00018A 75 82 BE         [24]  744 	mov	dpl,#0xbe
      00018D 12r01r3C         [24]  745 	lcall	_WriteOneByte
                                    746 ;	main.c:109: DisplayDigits();
      000190 12r00r2E         [24]  747 	lcall	_DisplayDigits
                                    748 ;	main.c:110: Temp_Value[0] = ReadOneByte();
      000193 12r00rFF         [24]  749 	lcall	_ReadOneByte
      000196 E5 82            [12]  750 	mov	a,dpl
      000198 F5*19            [12]  751 	mov	_Temp_Value,a
                                    752 ;	main.c:111: Temp_Value[1] = ReadOneByte();
      00019A 12r00rFF         [24]  753 	lcall	_ReadOneByte
      00019D E5 82            [12]  754 	mov	a,dpl
      00019F F5*1A            [12]  755 	mov	(_Temp_Value + 0x0001),a
                                    756 ;	main.c:112: DisplayDigits();
      0001A1 12r00r2E         [24]  757 	lcall	_DisplayDigits
                                    758 ;	main.c:113: DS18B20_IS_OK = 1;
      0001A4 75*1B 01         [24]  759 	mov	_DS18B20_IS_OK,#0x01
                                    760 ;	main.c:115: }
      0001A7 22               [24]  761 	ret
                                    762 ;------------------------------------------------------------
                                    763 ;Allocation info for local variables in function 'Temperature_Process'
                                    764 ;------------------------------------------------------------
                                    765 ;Temper                    Allocated to registers r4 r5 
                                    766 ;tp                        Allocated to registers r4 r5 r6 r7 
                                    767 ;------------------------------------------------------------
                                    768 ;	main.c:116: void Temperature_Process() //convert temperature from hex to decimal, then make it diplayable.
                                    769 ;	-----------------------------------------
                                    770 ;	 function Temperature_Process
                                    771 ;	-----------------------------------------
      0001A8                        772 _Temperature_Process:
                                    773 ;	main.c:118: int Temper = Temp_Value[1];
                                    774 ;	main.c:119: Temper <<= 8;
      0001A8 AF*1A            [24]  775 	mov	r7,(_Temp_Value + 0x0001)
      0001AA 7E 00            [12]  776 	mov	r6,#0x00
                                    777 ;	main.c:120: Temper |= Temp_Value[0];
      0001AC AC*19            [24]  778 	mov	r4,_Temp_Value
      0001AE 7D 00            [12]  779 	mov	r5,#0x00
      0001B0 EC               [12]  780 	mov	a,r4
      0001B1 42 06            [12]  781 	orl	ar6,a
      0001B3 ED               [12]  782 	mov	a,r5
      0001B4 42 07            [12]  783 	orl	ar7,a
                                    784 ;	main.c:121: DisplayDigits();
      0001B6 C0 07            [24]  785 	push	ar7
      0001B8 C0 06            [24]  786 	push	ar6
      0001BA 12r00r2E         [24]  787 	lcall	_DisplayDigits
      0001BD D0 06            [24]  788 	pop	ar6
      0001BF D0 07            [24]  789 	pop	ar7
                                    790 ;	main.c:123: if(Temper<0)
      0001C1 EF               [12]  791 	mov	a,r7
      0001C2 30 E7 18         [24]  792 	jnb	acc.7,00102$
                                    793 ;	main.c:125: Display[0] = 0x40;
      0001C5 75*10 40         [24]  794 	mov	_Display,#0x40
                                    795 ;	main.c:126: Temper -= 1;
      0001C8 EE               [12]  796 	mov	a,r6
      0001C9 24 FF            [12]  797 	add	a,#0xff
      0001CB FC               [12]  798 	mov	r4,a
      0001CC EF               [12]  799 	mov	a,r7
      0001CD 34 FF            [12]  800 	addc	a,#0xff
                                    801 ;	main.c:127: Temper = !Temper;
      0001CF 4C               [12]  802 	orl	a,r4
      0001D0 B4 01 00         [24]  803 	cjne	a,#0x01,00112$
      0001D3                        804 00112$:
      0001D3 E4               [12]  805 	clr	a
      0001D4 33               [12]  806 	rlc	a
      0001D5 FD               [12]  807 	mov	r5,a
      0001D6 FE               [12]  808 	mov	r6,a
      0001D7 33               [12]  809 	rlc	a
      0001D8 95 E0            [12]  810 	subb	a,acc
      0001DA FF               [12]  811 	mov	r7,a
      0001DB 80 03            [24]  812 	sjmp	00103$
      0001DD                        813 00102$:
                                    814 ;	main.c:131: Display[0] = 0x00;
      0001DD 75*10 00         [24]  815 	mov	_Display,#0x00
      0001E0                        816 00103$:
                                    817 ;	main.c:133: tp = Temper;
      0001E0 8E 82            [24]  818 	mov	dpl,r6
      0001E2 8F 83            [24]  819 	mov	dph,r7
      0001E4 12r00r00         [24]  820 	lcall	___sint2fs
      0001E7 AC 82            [24]  821 	mov	r4,dpl
      0001E9 AD 83            [24]  822 	mov	r5,dph
      0001EB AE F0            [24]  823 	mov	r6,b
      0001ED FF               [12]  824 	mov	r7,a
                                    825 ;	main.c:134: DisplayDigits();
      0001EE C0 07            [24]  826 	push	ar7
      0001F0 C0 06            [24]  827 	push	ar6
      0001F2 C0 05            [24]  828 	push	ar5
      0001F4 C0 04            [24]  829 	push	ar4
      0001F6 12r00r2E         [24]  830 	lcall	_DisplayDigits
      0001F9 D0 04            [24]  831 	pop	ar4
      0001FB D0 05            [24]  832 	pop	ar5
      0001FD D0 06            [24]  833 	pop	ar6
      0001FF D0 07            [24]  834 	pop	ar7
                                    835 ;	main.c:135: Temper = tp * 0.0625 * 100 + 0.5;
      000201 C0 04            [24]  836 	push	ar4
      000203 C0 05            [24]  837 	push	ar5
      000205 C0 06            [24]  838 	push	ar6
      000207 C0 07            [24]  839 	push	ar7
      000209 90 00 00         [24]  840 	mov	dptr,#0x0000
      00020C 75 F0 C8         [24]  841 	mov	b,#0xc8
      00020F 74 40            [12]  842 	mov	a,#0x40
      000211 12r00r00         [24]  843 	lcall	___fsmul
      000214 AC 82            [24]  844 	mov	r4,dpl
      000216 AD 83            [24]  845 	mov	r5,dph
      000218 AE F0            [24]  846 	mov	r6,b
      00021A FF               [12]  847 	mov	r7,a
      00021B E5 81            [12]  848 	mov	a,sp
      00021D 24 FC            [12]  849 	add	a,#0xfc
      00021F F5 81            [12]  850 	mov	sp,a
      000221 E4               [12]  851 	clr	a
      000222 C0 E0            [24]  852 	push	acc
      000224 C0 E0            [24]  853 	push	acc
      000226 C0 E0            [24]  854 	push	acc
      000228 74 3F            [12]  855 	mov	a,#0x3f
      00022A C0 E0            [24]  856 	push	acc
      00022C 8C 82            [24]  857 	mov	dpl,r4
      00022E 8D 83            [24]  858 	mov	dph,r5
      000230 8E F0            [24]  859 	mov	b,r6
      000232 EF               [12]  860 	mov	a,r7
      000233 12r00r00         [24]  861 	lcall	___fsadd
      000236 AC 82            [24]  862 	mov	r4,dpl
      000238 AD 83            [24]  863 	mov	r5,dph
      00023A AE F0            [24]  864 	mov	r6,b
      00023C FF               [12]  865 	mov	r7,a
      00023D E5 81            [12]  866 	mov	a,sp
      00023F 24 FC            [12]  867 	add	a,#0xfc
      000241 F5 81            [12]  868 	mov	sp,a
      000243 8C 82            [24]  869 	mov	dpl,r4
      000245 8D 83            [24]  870 	mov	dph,r5
      000247 8E F0            [24]  871 	mov	b,r6
      000249 EF               [12]  872 	mov	a,r7
      00024A 12r00r00         [24]  873 	lcall	___fs2sint
      00024D AE 82            [24]  874 	mov	r6,dpl
      00024F AF 83            [24]  875 	mov	r7,dph
                                    876 ;	main.c:136: DisplayDigits();
      000251 C0 07            [24]  877 	push	ar7
      000253 C0 06            [24]  878 	push	ar6
      000255 12r00r2E         [24]  879 	lcall	_DisplayDigits
      000258 D0 06            [24]  880 	pop	ar6
      00025A D0 07            [24]  881 	pop	ar7
                                    882 ;	main.c:137: Display[1] = smgduan[Temper/10000];
      00025C 75*00 10         [24]  883 	mov	__divsint_PARM_2,#0x10
      00025F 75*01 27         [24]  884 	mov	(__divsint_PARM_2 + 1),#0x27
      000262 8E 82            [24]  885 	mov	dpl,r6
      000264 8F 83            [24]  886 	mov	dph,r7
      000266 C0 07            [24]  887 	push	ar7
      000268 C0 06            [24]  888 	push	ar6
      00026A 12r00r00         [24]  889 	lcall	__divsint
      00026D AC 82            [24]  890 	mov	r4,dpl
      00026F D0 06            [24]  891 	pop	ar6
      000271 D0 07            [24]  892 	pop	ar7
      000273 EC               [12]  893 	mov	a,r4
      000274 24r00            [12]  894 	add	a,#_smgduan
      000276 F9               [12]  895 	mov	r1,a
      000277 87 05            [24]  896 	mov	ar5,@r1
      000279 8D*11            [24]  897 	mov	(_Display + 0x0001),r5
                                    898 ;	main.c:138: DisplayDigits();
      00027B C0 07            [24]  899 	push	ar7
      00027D C0 06            [24]  900 	push	ar6
      00027F 12r00r2E         [24]  901 	lcall	_DisplayDigits
      000282 D0 06            [24]  902 	pop	ar6
      000284 D0 07            [24]  903 	pop	ar7
                                    904 ;	main.c:139: Display[2] = smgduan[Temper%10000/1000];
      000286 75*00 10         [24]  905 	mov	__modsint_PARM_2,#0x10
      000289 75*01 27         [24]  906 	mov	(__modsint_PARM_2 + 1),#0x27
      00028C 8E 82            [24]  907 	mov	dpl,r6
      00028E 8F 83            [24]  908 	mov	dph,r7
      000290 C0 07            [24]  909 	push	ar7
      000292 C0 06            [24]  910 	push	ar6
      000294 12r00r00         [24]  911 	lcall	__modsint
      000297 75*00 E8         [24]  912 	mov	__divsint_PARM_2,#0xe8
      00029A 75*01 03         [24]  913 	mov	(__divsint_PARM_2 + 1),#0x03
      00029D 12r00r00         [24]  914 	lcall	__divsint
      0002A0 AC 82            [24]  915 	mov	r4,dpl
      0002A2 D0 06            [24]  916 	pop	ar6
      0002A4 D0 07            [24]  917 	pop	ar7
      0002A6 EC               [12]  918 	mov	a,r4
      0002A7 24r00            [12]  919 	add	a,#_smgduan
      0002A9 F9               [12]  920 	mov	r1,a
      0002AA 87 05            [24]  921 	mov	ar5,@r1
      0002AC 8D*12            [24]  922 	mov	(_Display + 0x0002),r5
                                    923 ;	main.c:140: DisplayDigits();
      0002AE C0 07            [24]  924 	push	ar7
      0002B0 C0 06            [24]  925 	push	ar6
      0002B2 12r00r2E         [24]  926 	lcall	_DisplayDigits
      0002B5 D0 06            [24]  927 	pop	ar6
      0002B7 D0 07            [24]  928 	pop	ar7
                                    929 ;	main.c:141: Display[3] = smgduan[Temper%1000/100]|0x80;
      0002B9 75*00 E8         [24]  930 	mov	__modsint_PARM_2,#0xe8
      0002BC 75*01 03         [24]  931 	mov	(__modsint_PARM_2 + 1),#0x03
      0002BF 8E 82            [24]  932 	mov	dpl,r6
      0002C1 8F 83            [24]  933 	mov	dph,r7
      0002C3 C0 07            [24]  934 	push	ar7
      0002C5 C0 06            [24]  935 	push	ar6
      0002C7 12r00r00         [24]  936 	lcall	__modsint
      0002CA 75*00 64         [24]  937 	mov	__divsint_PARM_2,#0x64
      0002CD 75*01 00         [24]  938 	mov	(__divsint_PARM_2 + 1),#0x00
      0002D0 12r00r00         [24]  939 	lcall	__divsint
      0002D3 AC 82            [24]  940 	mov	r4,dpl
      0002D5 D0 06            [24]  941 	pop	ar6
      0002D7 D0 07            [24]  942 	pop	ar7
      0002D9 EC               [12]  943 	mov	a,r4
      0002DA 24r00            [12]  944 	add	a,#_smgduan
      0002DC F9               [12]  945 	mov	r1,a
      0002DD 87 05            [24]  946 	mov	ar5,@r1
      0002DF 43 05 80         [24]  947 	orl	ar5,#0x80
      0002E2 8D*13            [24]  948 	mov	(_Display + 0x0003),r5
                                    949 ;	main.c:142: DisplayDigits();
      0002E4 C0 07            [24]  950 	push	ar7
      0002E6 C0 06            [24]  951 	push	ar6
      0002E8 12r00r2E         [24]  952 	lcall	_DisplayDigits
      0002EB D0 06            [24]  953 	pop	ar6
      0002ED D0 07            [24]  954 	pop	ar7
                                    955 ;	main.c:143: Display[4] = smgduan[Temper%100/10];
      0002EF 75*00 64         [24]  956 	mov	__modsint_PARM_2,#0x64
      0002F2 75*01 00         [24]  957 	mov	(__modsint_PARM_2 + 1),#0x00
      0002F5 8E 82            [24]  958 	mov	dpl,r6
      0002F7 8F 83            [24]  959 	mov	dph,r7
      0002F9 C0 07            [24]  960 	push	ar7
      0002FB C0 06            [24]  961 	push	ar6
      0002FD 12r00r00         [24]  962 	lcall	__modsint
      000300 75*00 0A         [24]  963 	mov	__divsint_PARM_2,#0x0a
      000303 75*01 00         [24]  964 	mov	(__divsint_PARM_2 + 1),#0x00
      000306 12r00r00         [24]  965 	lcall	__divsint
      000309 AC 82            [24]  966 	mov	r4,dpl
      00030B D0 06            [24]  967 	pop	ar6
      00030D D0 07            [24]  968 	pop	ar7
      00030F EC               [12]  969 	mov	a,r4
      000310 24r00            [12]  970 	add	a,#_smgduan
      000312 F9               [12]  971 	mov	r1,a
      000313 87 05            [24]  972 	mov	ar5,@r1
      000315 8D*14            [24]  973 	mov	(_Display + 0x0004),r5
                                    974 ;	main.c:144: DisplayDigits();
      000317 C0 07            [24]  975 	push	ar7
      000319 C0 06            [24]  976 	push	ar6
      00031B 12r00r2E         [24]  977 	lcall	_DisplayDigits
      00031E D0 06            [24]  978 	pop	ar6
      000320 D0 07            [24]  979 	pop	ar7
                                    980 ;	main.c:145: Display[5] = smgduan[Temper%10];
      000322 75*00 0A         [24]  981 	mov	__modsint_PARM_2,#0x0a
      000325 75*01 00         [24]  982 	mov	(__modsint_PARM_2 + 1),#0x00
      000328 8E 82            [24]  983 	mov	dpl,r6
      00032A 8F 83            [24]  984 	mov	dph,r7
      00032C 12r00r00         [24]  985 	lcall	__modsint
      00032F E5 82            [12]  986 	mov	a,dpl
      000331 24r00            [12]  987 	add	a,#_smgduan
      000333 F9               [12]  988 	mov	r1,a
      000334 87 07            [24]  989 	mov	ar7,@r1
      000336 8F*15            [24]  990 	mov	(_Display + 0x0005),r7
                                    991 ;	main.c:146: }
      000338 22               [24]  992 	ret
                                    993 ;------------------------------------------------------------
                                    994 ;Allocation info for local variables in function 'main'
                                    995 ;------------------------------------------------------------
                                    996 ;i                         Allocated to registers r7 
                                    997 ;------------------------------------------------------------
                                    998 ;	main.c:148: void main()
                                    999 ;	-----------------------------------------
                                   1000 ;	 function main
                                   1001 ;	-----------------------------------------
      000339                       1002 _main:
                                   1003 ;	main.c:150: Init_DS18B20();
      000339 12r00rD6         [24] 1004 	lcall	_Init_DS18B20
                                   1005 ;	main.c:151: delay(50000);
      00033C 90 C3 50         [24] 1006 	mov	dptr,#0xc350
      00033F 12r00r00         [24] 1007 	lcall	_delay
                                   1008 ;	main.c:152: delay(25000);
      000342 90 61 A8         [24] 1009 	mov	dptr,#0x61a8
      000345 12r00r00         [24] 1010 	lcall	_delay
                                   1011 ;	main.c:153: while(1)
      000348                       1012 00105$:
                                   1013 ;	main.c:155: ReadTemperature();
      000348 12r01r64         [24] 1014 	lcall	_ReadTemperature
                                   1015 ;	main.c:156: Temperature_Process();
      00034B 12r01rA8         [24] 1016 	lcall	_Temperature_Process
                                   1017 ;	main.c:158: while(i--)
      00034E 7F 0A            [12] 1018 	mov	r7,#0x0a
      000350                       1019 00101$:
      000350 8F 06            [24] 1020 	mov	ar6,r7
      000352 1F               [12] 1021 	dec	r7
      000353 EE               [12] 1022 	mov	a,r6
      000354 60 09            [24] 1023 	jz	00103$
                                   1024 ;	main.c:160: DisplayDigits();
      000356 C0 07            [24] 1025 	push	ar7
      000358 12r00r2E         [24] 1026 	lcall	_DisplayDigits
      00035B D0 07            [24] 1027 	pop	ar7
      00035D 80 F1            [24] 1028 	sjmp	00101$
      00035F                       1029 00103$:
                                   1030 ;	main.c:162: DelayXus(10);
      00035F 90 00 0A         [24] 1031 	mov	dptr,#0x000a
      000362 12r00r12         [24] 1032 	lcall	_DelayXus
                                   1033 ;	main.c:164: }
      000365 80 E1            [24] 1034 	sjmp	00105$
                                   1035 	.area CSEG    (CODE)
                                   1036 	.area CONST   (CODE)
                                   1037 	.area XINIT   (CODE)
                                   1038 	.area CABS    (ABS,CODE)
