                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Digitspros
                                     13 	.globl _Keypros
                                     14 	.globl _DisplayDigits
                                     15 	.globl _DelayXus
                                     16 	.globl _delay
                                     17 	.globl _At24c02Read
                                     18 	.globl _At24c02Write
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _PSW
                                     97 	.globl _IP
                                     98 	.globl _P3
                                     99 	.globl _IE
                                    100 	.globl _P2
                                    101 	.globl _SBUF
                                    102 	.globl _SCON
                                    103 	.globl _P1
                                    104 	.globl _TH1
                                    105 	.globl _TH0
                                    106 	.globl _TL1
                                    107 	.globl _TL0
                                    108 	.globl _TMOD
                                    109 	.globl _TCON
                                    110 	.globl _PCON
                                    111 	.globl _DPH
                                    112 	.globl _DPL
                                    113 	.globl _SP
                                    114 	.globl _P0
                                    115 	.globl _num
                                    116 	.globl _Display
                                    117 	.globl _smgduan
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 	.area RSEG    (ABS,DATA)
      000000                        122 	.org 0x0000
                           000080   123 _P0	=	0x0080
                           000081   124 _SP	=	0x0081
                           000082   125 _DPL	=	0x0082
                           000083   126 _DPH	=	0x0083
                           000087   127 _PCON	=	0x0087
                           000088   128 _TCON	=	0x0088
                           000089   129 _TMOD	=	0x0089
                           00008A   130 _TL0	=	0x008a
                           00008B   131 _TL1	=	0x008b
                           00008C   132 _TH0	=	0x008c
                           00008D   133 _TH1	=	0x008d
                           000090   134 _P1	=	0x0090
                           000098   135 _SCON	=	0x0098
                           000099   136 _SBUF	=	0x0099
                           0000A0   137 _P2	=	0x00a0
                           0000A8   138 _IE	=	0x00a8
                           0000B0   139 _P3	=	0x00b0
                           0000B8   140 _IP	=	0x00b8
                           0000D0   141 _PSW	=	0x00d0
                           0000E0   142 _ACC	=	0x00e0
                           0000F0   143 _B	=	0x00f0
                                    144 ;--------------------------------------------------------
                                    145 ; special function bits
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0_0	=	0x0080
                           000081   150 _P0_1	=	0x0081
                           000082   151 _P0_2	=	0x0082
                           000083   152 _P0_3	=	0x0083
                           000084   153 _P0_4	=	0x0084
                           000085   154 _P0_5	=	0x0085
                           000086   155 _P0_6	=	0x0086
                           000087   156 _P0_7	=	0x0087
                           000088   157 _IT0	=	0x0088
                           000089   158 _IE0	=	0x0089
                           00008A   159 _IT1	=	0x008a
                           00008B   160 _IE1	=	0x008b
                           00008C   161 _TR0	=	0x008c
                           00008D   162 _TF0	=	0x008d
                           00008E   163 _TR1	=	0x008e
                           00008F   164 _TF1	=	0x008f
                           000090   165 _P1_0	=	0x0090
                           000091   166 _P1_1	=	0x0091
                           000092   167 _P1_2	=	0x0092
                           000093   168 _P1_3	=	0x0093
                           000094   169 _P1_4	=	0x0094
                           000095   170 _P1_5	=	0x0095
                           000096   171 _P1_6	=	0x0096
                           000097   172 _P1_7	=	0x0097
                           000098   173 _RI	=	0x0098
                           000099   174 _TI	=	0x0099
                           00009A   175 _RB8	=	0x009a
                           00009B   176 _TB8	=	0x009b
                           00009C   177 _REN	=	0x009c
                           00009D   178 _SM2	=	0x009d
                           00009E   179 _SM1	=	0x009e
                           00009F   180 _SM0	=	0x009f
                           0000A0   181 _P2_0	=	0x00a0
                           0000A1   182 _P2_1	=	0x00a1
                           0000A2   183 _P2_2	=	0x00a2
                           0000A3   184 _P2_3	=	0x00a3
                           0000A4   185 _P2_4	=	0x00a4
                           0000A5   186 _P2_5	=	0x00a5
                           0000A6   187 _P2_6	=	0x00a6
                           0000A7   188 _P2_7	=	0x00a7
                           0000A8   189 _EX0	=	0x00a8
                           0000A9   190 _ET0	=	0x00a9
                           0000AA   191 _EX1	=	0x00aa
                           0000AB   192 _ET1	=	0x00ab
                           0000AC   193 _ES	=	0x00ac
                           0000AF   194 _EA	=	0x00af
                           0000B0   195 _P3_0	=	0x00b0
                           0000B1   196 _P3_1	=	0x00b1
                           0000B2   197 _P3_2	=	0x00b2
                           0000B3   198 _P3_3	=	0x00b3
                           0000B4   199 _P3_4	=	0x00b4
                           0000B5   200 _P3_5	=	0x00b5
                           0000B6   201 _P3_6	=	0x00b6
                           0000B7   202 _P3_7	=	0x00b7
                           0000B0   203 _RXD	=	0x00b0
                           0000B1   204 _TXD	=	0x00b1
                           0000B2   205 _INT0	=	0x00b2
                           0000B3   206 _INT1	=	0x00b3
                           0000B4   207 _T0	=	0x00b4
                           0000B5   208 _T1	=	0x00b5
                           0000B6   209 _WR	=	0x00b6
                           0000B7   210 _RD	=	0x00b7
                           0000B8   211 _PX0	=	0x00b8
                           0000B9   212 _PT0	=	0x00b9
                           0000BA   213 _PX1	=	0x00ba
                           0000BB   214 _PT1	=	0x00bb
                           0000BC   215 _PS	=	0x00bc
                           0000D0   216 _P	=	0x00d0
                           0000D1   217 _F1	=	0x00d1
                           0000D2   218 _OV	=	0x00d2
                           0000D3   219 _RS0	=	0x00d3
                           0000D4   220 _RS1	=	0x00d4
                           0000D5   221 _F0	=	0x00d5
                           0000D6   222 _AC	=	0x00d6
                           0000D7   223 _CY	=	0x00d7
                                    224 ;--------------------------------------------------------
                                    225 ; overlayable register banks
                                    226 ;--------------------------------------------------------
                                    227 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        228 	.ds 8
                                    229 ;--------------------------------------------------------
                                    230 ; internal ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area DSEG    (DATA)
      000000                        233 _smgduan::
      000000                        234 	.ds 16
      000010                        235 _Display::
      000010                        236 	.ds 8
      000018                        237 _num::
      000018                        238 	.ds 1
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable items in internal ram 
                                    241 ;--------------------------------------------------------
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 	.area	OSEG    (OVR,DATA)
                                    244 ;--------------------------------------------------------
                                    245 ; Stack segment in internal ram 
                                    246 ;--------------------------------------------------------
                                    247 	.area	SSEG
      000000                        248 __start__stack:
      000000                        249 	.ds	1
                                    250 
                                    251 ;--------------------------------------------------------
                                    252 ; indirectly addressable internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area ISEG    (DATA)
                                    255 ;--------------------------------------------------------
                                    256 ; absolute internal ram data
                                    257 ;--------------------------------------------------------
                                    258 	.area IABS    (ABS,DATA)
                                    259 	.area IABS    (ABS,DATA)
                                    260 ;--------------------------------------------------------
                                    261 ; bit data
                                    262 ;--------------------------------------------------------
                                    263 	.area BSEG    (BIT)
                                    264 ;--------------------------------------------------------
                                    265 ; paged external ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area PSEG    (PAG,XDATA)
                                    268 ;--------------------------------------------------------
                                    269 ; external ram data
                                    270 ;--------------------------------------------------------
                                    271 	.area XSEG    (XDATA)
                                    272 ;--------------------------------------------------------
                                    273 ; absolute external ram data
                                    274 ;--------------------------------------------------------
                                    275 	.area XABS    (ABS,XDATA)
                                    276 ;--------------------------------------------------------
                                    277 ; external initialized ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area XISEG   (XDATA)
                                    280 	.area HOME    (CODE)
                                    281 	.area GSINIT0 (CODE)
                                    282 	.area GSINIT1 (CODE)
                                    283 	.area GSINIT2 (CODE)
                                    284 	.area GSINIT3 (CODE)
                                    285 	.area GSINIT4 (CODE)
                                    286 	.area GSINIT5 (CODE)
                                    287 	.area GSINIT  (CODE)
                                    288 	.area GSFINAL (CODE)
                                    289 	.area CSEG    (CODE)
                                    290 ;--------------------------------------------------------
                                    291 ; interrupt vector 
                                    292 ;--------------------------------------------------------
                                    293 	.area HOME    (CODE)
      000000                        294 __interrupt_vect:
      000000 02r00r00         [24]  295 	ljmp	__sdcc_gsinit_startup
                                    296 ;--------------------------------------------------------
                                    297 ; global & static initialisations
                                    298 ;--------------------------------------------------------
                                    299 	.area HOME    (CODE)
                                    300 	.area GSINIT  (CODE)
                                    301 	.area GSFINAL (CODE)
                                    302 	.area GSINIT  (CODE)
                                    303 	.globl __sdcc_gsinit_startup
                                    304 	.globl __sdcc_program_startup
                                    305 	.globl __start__stack
                                    306 	.globl __mcs51_genXINIT
                                    307 	.globl __mcs51_genXRAMCLEAR
                                    308 	.globl __mcs51_genRAMCLEAR
                                    309 ;	main.c:25: uchar smgduan[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 
      000000 75*00 3F         [24]  310 	mov	_smgduan,#0x3f
      000003 75*01 06         [24]  311 	mov	(_smgduan + 0x0001),#0x06
      000006 75*02 5B         [24]  312 	mov	(_smgduan + 0x0002),#0x5b
      000009 75*03 4F         [24]  313 	mov	(_smgduan + 0x0003),#0x4f
      00000C 75*04 66         [24]  314 	mov	(_smgduan + 0x0004),#0x66
      00000F 75*05 6D         [24]  315 	mov	(_smgduan + 0x0005),#0x6d
      000012 75*06 7D         [24]  316 	mov	(_smgduan + 0x0006),#0x7d
      000015 75*07 07         [24]  317 	mov	(_smgduan + 0x0007),#0x07
      000018 75*08 7F         [24]  318 	mov	(_smgduan + 0x0008),#0x7f
      00001B 75*09 6F         [24]  319 	mov	(_smgduan + 0x0009),#0x6f
      00001E 75*0A 77         [24]  320 	mov	(_smgduan + 0x000a),#0x77
      000021 75*0B 7C         [24]  321 	mov	(_smgduan + 0x000b),#0x7c
      000024 75*0C 39         [24]  322 	mov	(_smgduan + 0x000c),#0x39
      000027 75*0D 5E         [24]  323 	mov	(_smgduan + 0x000d),#0x5e
      00002A 75*0E 79         [24]  324 	mov	(_smgduan + 0x000e),#0x79
      00002D 75*0F 71         [24]  325 	mov	(_smgduan + 0x000f),#0x71
                                    326 ;	main.c:27: uchar Display[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      000030 75*10 00         [24]  327 	mov	_Display,#0x00
      000033 75*11 00         [24]  328 	mov	(_Display + 0x0001),#0x00
      000036 75*12 00         [24]  329 	mov	(_Display + 0x0002),#0x00
      000039 75*13 00         [24]  330 	mov	(_Display + 0x0003),#0x00
      00003C 75*14 00         [24]  331 	mov	(_Display + 0x0004),#0x00
      00003F 75*15 00         [24]  332 	mov	(_Display + 0x0005),#0x00
      000042 75*16 00         [24]  333 	mov	(_Display + 0x0006),#0x00
      000045 75*17 00         [24]  334 	mov	(_Display + 0x0007),#0x00
                                    335 ;	main.c:46: uchar num=0;
      000048 75*18 00         [24]  336 	mov	_num,#0x00
                                    337 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  338 	ljmp	__sdcc_program_startup
                                    339 ;--------------------------------------------------------
                                    340 ; Home
                                    341 ;--------------------------------------------------------
                                    342 	.area HOME    (CODE)
                                    343 	.area HOME    (CODE)
      000003                        344 __sdcc_program_startup:
      000003 02r01rB6         [24]  345 	ljmp	_main
                                    346 ;	return from main will return to caller
                                    347 ;--------------------------------------------------------
                                    348 ; code
                                    349 ;--------------------------------------------------------
                                    350 	.area CSEG    (CODE)
                                    351 ;------------------------------------------------------------
                                    352 ;Allocation info for local variables in function 'delay'
                                    353 ;------------------------------------------------------------
                                    354 ;i                         Allocated to registers 
                                    355 ;------------------------------------------------------------
                                    356 ;	main.c:6: void delay(uint i)
                                    357 ;	-----------------------------------------
                                    358 ;	 function delay
                                    359 ;	-----------------------------------------
      000000                        360 _delay:
                           000007   361 	ar7 = 0x07
                           000006   362 	ar6 = 0x06
                           000005   363 	ar5 = 0x05
                           000004   364 	ar4 = 0x04
                           000003   365 	ar3 = 0x03
                           000002   366 	ar2 = 0x02
                           000001   367 	ar1 = 0x01
                           000000   368 	ar0 = 0x00
      000000 AE 82            [24]  369 	mov	r6,dpl
      000002 AF 83            [24]  370 	mov	r7,dph
                                    371 ;	main.c:8: while(i--);
      000004                        372 00101$:
      000004 8E 04            [24]  373 	mov	ar4,r6
      000006 8F 05            [24]  374 	mov	ar5,r7
      000008 1E               [12]  375 	dec	r6
      000009 BE FF 01         [24]  376 	cjne	r6,#0xff,00111$
      00000C 1F               [12]  377 	dec	r7
      00000D                        378 00111$:
      00000D EC               [12]  379 	mov	a,r4
      00000E 4D               [12]  380 	orl	a,r5
      00000F 70 F3            [24]  381 	jnz	00101$
                                    382 ;	main.c:9: }
      000011 22               [24]  383 	ret
                                    384 ;------------------------------------------------------------
                                    385 ;Allocation info for local variables in function 'DelayXus'
                                    386 ;------------------------------------------------------------
                                    387 ;x                         Allocated to registers 
                                    388 ;i                         Allocated to registers r5 
                                    389 ;------------------------------------------------------------
                                    390 ;	main.c:11: void DelayXus(uint x)
                                    391 ;	-----------------------------------------
                                    392 ;	 function DelayXus
                                    393 ;	-----------------------------------------
      000012                        394 _DelayXus:
      000012 AE 82            [24]  395 	mov	r6,dpl
      000014 AF 83            [24]  396 	mov	r7,dph
                                    397 ;	main.c:14: while(x--)
      000016                        398 00102$:
      000016 8E 04            [24]  399 	mov	ar4,r6
      000018 8F 05            [24]  400 	mov	ar5,r7
      00001A 1E               [12]  401 	dec	r6
      00001B BE FF 01         [24]  402 	cjne	r6,#0xff,00127$
      00001E 1F               [12]  403 	dec	r7
      00001F                        404 00127$:
      00001F EC               [12]  405 	mov	a,r4
      000020 4D               [12]  406 	orl	a,r5
      000021 60 0A            [24]  407 	jz	00108$
                                    408 ;	main.c:16: for(i=0;i<100;i++);
      000023 7D 64            [12]  409 	mov	r5,#0x64
      000025                        410 00107$:
      000025 ED               [12]  411 	mov	a,r5
      000026 14               [12]  412 	dec	a
      000027 FC               [12]  413 	mov	r4,a
      000028 FD               [12]  414 	mov	r5,a
      000029 70 FA            [24]  415 	jnz	00107$
      00002B 80 E9            [24]  416 	sjmp	00102$
      00002D                        417 00108$:
                                    418 ;	main.c:18: }
      00002D 22               [24]  419 	ret
                                    420 ;------------------------------------------------------------
                                    421 ;Allocation info for local variables in function 'DisplayDigits'
                                    422 ;------------------------------------------------------------
                                    423 ;i                         Allocated to registers r7 
                                    424 ;------------------------------------------------------------
                                    425 ;	main.c:28: void DisplayDigits()
                                    426 ;	-----------------------------------------
                                    427 ;	 function DisplayDigits
                                    428 ;	-----------------------------------------
      00002E                        429 _DisplayDigits:
                                    430 ;	main.c:31: for(i=4;i<8;i++)
      00002E 7F 04            [12]  431 	mov	r7,#0x04
      000030                        432 00102$:
                                    433 ;	main.c:33: LSC = i / 4;
      000030 8F 05            [24]  434 	mov	ar5,r7
      000032 7E 00            [12]  435 	mov	r6,#0x00
      000034 75*00 04         [24]  436 	mov	__divsint_PARM_2,#0x04
                                    437 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000037 8E*01            [24]  438 	mov	(__divsint_PARM_2 + 1),r6
      000039 8D 82            [24]  439 	mov	dpl,r5
      00003B 8E 83            [24]  440 	mov	dph,r6
      00003D C0 07            [24]  441 	push	ar7
      00003F C0 06            [24]  442 	push	ar6
      000041 C0 05            [24]  443 	push	ar5
      000043 12r00r00         [24]  444 	lcall	__divsint
      000046 AB 82            [24]  445 	mov	r3,dpl
      000048 AC 83            [24]  446 	mov	r4,dph
      00004A D0 05            [24]  447 	pop	ar5
      00004C D0 06            [24]  448 	pop	ar6
                                    449 ;	assignBit
      00004E EB               [12]  450 	mov	a,r3
      00004F 4C               [12]  451 	orl	a,r4
      000050 24 FF            [12]  452 	add	a,#0xff
      000052 92 A4            [24]  453 	mov	_P2_4,c
                                    454 ;	main.c:34: LSB = (i-4*LSC) / 2;
      000054 A2 A4            [12]  455 	mov	c,_P2_4
      000056 E4               [12]  456 	clr	a
      000057 33               [12]  457 	rlc	a
      000058 7C 00            [12]  458 	mov	r4,#0x00
      00005A 25 E0            [12]  459 	add	a,acc
      00005C FB               [12]  460 	mov	r3,a
      00005D EC               [12]  461 	mov	a,r4
      00005E 33               [12]  462 	rlc	a
      00005F FC               [12]  463 	mov	r4,a
      000060 EB               [12]  464 	mov	a,r3
      000061 2B               [12]  465 	add	a,r3
      000062 FB               [12]  466 	mov	r3,a
      000063 EC               [12]  467 	mov	a,r4
      000064 33               [12]  468 	rlc	a
      000065 FC               [12]  469 	mov	r4,a
      000066 ED               [12]  470 	mov	a,r5
      000067 C3               [12]  471 	clr	c
      000068 9B               [12]  472 	subb	a,r3
      000069 F5 82            [12]  473 	mov	dpl,a
      00006B EE               [12]  474 	mov	a,r6
      00006C 9C               [12]  475 	subb	a,r4
      00006D F5 83            [12]  476 	mov	dph,a
      00006F 75*00 02         [24]  477 	mov	__divsint_PARM_2,#0x02
      000072 75*01 00         [24]  478 	mov	(__divsint_PARM_2 + 1),#0x00
      000075 C0 06            [24]  479 	push	ar6
      000077 C0 05            [24]  480 	push	ar5
      000079 12r00r00         [24]  481 	lcall	__divsint
      00007C AB 82            [24]  482 	mov	r3,dpl
      00007E AC 83            [24]  483 	mov	r4,dph
      000080 D0 05            [24]  484 	pop	ar5
      000082 D0 06            [24]  485 	pop	ar6
      000084 D0 07            [24]  486 	pop	ar7
                                    487 ;	assignBit
      000086 EB               [12]  488 	mov	a,r3
      000087 4C               [12]  489 	orl	a,r4
      000088 24 FF            [12]  490 	add	a,#0xff
      00008A 92 A3            [24]  491 	mov	_P2_3,c
                                    492 ;	main.c:35: LSA = i - 4*LSC - 2*LSB;
      00008C A2 A4            [12]  493 	mov	c,_P2_4
      00008E E4               [12]  494 	clr	a
      00008F 33               [12]  495 	rlc	a
      000090 7C 00            [12]  496 	mov	r4,#0x00
      000092 25 E0            [12]  497 	add	a,acc
      000094 FB               [12]  498 	mov	r3,a
      000095 EC               [12]  499 	mov	a,r4
      000096 33               [12]  500 	rlc	a
      000097 FC               [12]  501 	mov	r4,a
      000098 EB               [12]  502 	mov	a,r3
      000099 2B               [12]  503 	add	a,r3
      00009A FB               [12]  504 	mov	r3,a
      00009B EC               [12]  505 	mov	a,r4
      00009C 33               [12]  506 	rlc	a
      00009D FC               [12]  507 	mov	r4,a
      00009E ED               [12]  508 	mov	a,r5
      00009F C3               [12]  509 	clr	c
      0000A0 9B               [12]  510 	subb	a,r3
      0000A1 FD               [12]  511 	mov	r5,a
      0000A2 EE               [12]  512 	mov	a,r6
      0000A3 9C               [12]  513 	subb	a,r4
      0000A4 FE               [12]  514 	mov	r6,a
      0000A5 A2 A3            [12]  515 	mov	c,_P2_3
      0000A7 E4               [12]  516 	clr	a
      0000A8 33               [12]  517 	rlc	a
      0000A9 7C 00            [12]  518 	mov	r4,#0x00
      0000AB 25 E0            [12]  519 	add	a,acc
      0000AD FB               [12]  520 	mov	r3,a
      0000AE EC               [12]  521 	mov	a,r4
      0000AF 33               [12]  522 	rlc	a
      0000B0 FC               [12]  523 	mov	r4,a
      0000B1 ED               [12]  524 	mov	a,r5
      0000B2 C3               [12]  525 	clr	c
      0000B3 9B               [12]  526 	subb	a,r3
      0000B4 FD               [12]  527 	mov	r5,a
      0000B5 EE               [12]  528 	mov	a,r6
      0000B6 9C               [12]  529 	subb	a,r4
                                    530 ;	assignBit
      0000B7 4D               [12]  531 	orl	a,r5
      0000B8 24 FF            [12]  532 	add	a,#0xff
      0000BA 92 A2            [24]  533 	mov	_P2_2,c
                                    534 ;	main.c:36: P0 = Display[i];
      0000BC EF               [12]  535 	mov	a,r7
      0000BD 24r10            [12]  536 	add	a,#_Display
      0000BF F9               [12]  537 	mov	r1,a
      0000C0 87 80            [24]  538 	mov	_P0,@r1
                                    539 ;	main.c:37: delay(100);
      0000C2 90 00 64         [24]  540 	mov	dptr,#0x0064
      0000C5 C0 07            [24]  541 	push	ar7
      0000C7 12r00r00         [24]  542 	lcall	_delay
      0000CA D0 07            [24]  543 	pop	ar7
                                    544 ;	main.c:38: P0 = 0x00;
      0000CC 75 80 00         [24]  545 	mov	_P0,#0x00
                                    546 ;	main.c:31: for(i=4;i<8;i++)
      0000CF 0F               [12]  547 	inc	r7
      0000D0 BF 08 00         [24]  548 	cjne	r7,#0x08,00111$
      0000D3                        549 00111$:
      0000D3 50 03            [24]  550 	jnc	00112$
      0000D5 02r00r30         [24]  551 	ljmp	00102$
      0000D8                        552 00112$:
                                    553 ;	main.c:40: }
      0000D8 22               [24]  554 	ret
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'Keypros'
                                    557 ;------------------------------------------------------------
                                    558 ;	main.c:47: void Keypros()
                                    559 ;	-----------------------------------------
                                    560 ;	 function Keypros
                                    561 ;	-----------------------------------------
      0000D9                        562 _Keypros:
                                    563 ;	main.c:49: if(k1 == 0)
      0000D9 20 90 15         [24]  564 	jb	_P1_0,00107$
                                    565 ;	main.c:51: delay(1000);
      0000DC 90 03 E8         [24]  566 	mov	dptr,#0x03e8
      0000DF 12r00r00         [24]  567 	lcall	_delay
                                    568 ;	main.c:52: if(k1==0)
      0000E2 20 90 0C         [24]  569 	jb	_P1_0,00107$
                                    570 ;	main.c:54: while(!k1);
      0000E5                        571 00101$:
      0000E5 30 90 FD         [24]  572 	jnb	_P1_0,00101$
                                    573 ;	main.c:55: At24c02Write(0x01,num);
      0000E8 85*18*00         [24]  574 	mov	_At24c02Write_PARM_2,_num
      0000EB 75 82 01         [24]  575 	mov	dpl,#0x01
      0000EE 12r00r00         [24]  576 	lcall	_At24c02Write
      0000F1                        577 00107$:
                                    578 ;	main.c:58: if(k2 == 0)
      0000F1 20 91 15         [24]  579 	jb	_P1_1,00114$
                                    580 ;	main.c:60: delay(1000);
      0000F4 90 03 E8         [24]  581 	mov	dptr,#0x03e8
      0000F7 12r00r00         [24]  582 	lcall	_delay
                                    583 ;	main.c:61: if(k2==0)
      0000FA 20 91 0C         [24]  584 	jb	_P1_1,00114$
                                    585 ;	main.c:63: while(!k2);
      0000FD                        586 00108$:
      0000FD 30 91 FD         [24]  587 	jnb	_P1_1,00108$
                                    588 ;	main.c:64: num=At24c02Read(0x01);
      000100 75 82 01         [24]  589 	mov	dpl,#0x01
      000103 12r00r00         [24]  590 	lcall	_At24c02Read
      000106 85 82*18         [24]  591 	mov	_num,dpl
      000109                        592 00114$:
                                    593 ;	main.c:67: if(k3 == 0)
      000109 20 92 1A         [24]  594 	jb	_P1_2,00123$
                                    595 ;	main.c:69: delay(1000);
      00010C 90 03 E8         [24]  596 	mov	dptr,#0x03e8
      00010F 12r00r00         [24]  597 	lcall	_delay
                                    598 ;	main.c:70: if(k3==0)
      000112 20 92 0E         [24]  599 	jb	_P1_2,00119$
                                    600 ;	main.c:72: num += 1;
      000115 E5*18            [12]  601 	mov	a,_num
      000117 FF               [12]  602 	mov	r7,a
      000118 04               [12]  603 	inc	a
                                    604 ;	main.c:73: if(num>=255)
      000119 F5*18            [12]  605 	mov	_num,a
      00011B C3               [12]  606 	clr	c
      00011C 94 FF            [12]  607 	subb	a,#0xff
      00011E 40 03            [24]  608 	jc	00119$
                                    609 ;	main.c:74: {num=0;}
      000120 75*18 00         [24]  610 	mov	_num,#0x00
                                    611 ;	main.c:76: while(!k3);
      000123                        612 00119$:
      000123 30 92 FD         [24]  613 	jnb	_P1_2,00119$
      000126                        614 00123$:
                                    615 ;	main.c:78: if(k4 == 0)
      000126 20 93 0F         [24]  616 	jb	_P1_3,00131$
                                    617 ;	main.c:80: delay(1000);
      000129 90 03 E8         [24]  618 	mov	dptr,#0x03e8
      00012C 12r00r00         [24]  619 	lcall	_delay
                                    620 ;	main.c:81: if(k4 == 0)
      00012F 20 93 03         [24]  621 	jb	_P1_3,00126$
                                    622 ;	main.c:83: num =0;
      000132 75*18 00         [24]  623 	mov	_num,#0x00
                                    624 ;	main.c:85: while(!k4);
      000135                        625 00126$:
      000135 30 93 FD         [24]  626 	jnb	_P1_3,00126$
      000138                        627 00131$:
                                    628 ;	main.c:87: }
      000138 22               [24]  629 	ret
                                    630 ;------------------------------------------------------------
                                    631 ;Allocation info for local variables in function 'Digitspros'
                                    632 ;------------------------------------------------------------
                                    633 ;	main.c:89: void Digitspros()
                                    634 ;	-----------------------------------------
                                    635 ;	 function Digitspros
                                    636 ;	-----------------------------------------
      000139                        637 _Digitspros:
                                    638 ;	main.c:91: Display[4] = smgduan[num/1000];
      000139 AE*18            [24]  639 	mov	r6,_num
      00013B 7F 00            [12]  640 	mov	r7,#0x00
      00013D 75*00 E8         [24]  641 	mov	__divsint_PARM_2,#0xe8
      000140 75*01 03         [24]  642 	mov	(__divsint_PARM_2 + 1),#0x03
      000143 8E 82            [24]  643 	mov	dpl,r6
      000145 8F 83            [24]  644 	mov	dph,r7
      000147 12r00r00         [24]  645 	lcall	__divsint
      00014A AE 82            [24]  646 	mov	r6,dpl
      00014C EE               [12]  647 	mov	a,r6
      00014D 24r00            [12]  648 	add	a,#_smgduan
      00014F F9               [12]  649 	mov	r1,a
      000150 87 07            [24]  650 	mov	ar7,@r1
      000152 8F*14            [24]  651 	mov	(_Display + 0x0004),r7
                                    652 ;	main.c:92: Display[5] = smgduan[num%1000/100];
      000154 AE*18            [24]  653 	mov	r6,_num
      000156 7F 00            [12]  654 	mov	r7,#0x00
      000158 75*00 E8         [24]  655 	mov	__modsint_PARM_2,#0xe8
      00015B 75*01 03         [24]  656 	mov	(__modsint_PARM_2 + 1),#0x03
      00015E 8E 82            [24]  657 	mov	dpl,r6
      000160 8F 83            [24]  658 	mov	dph,r7
      000162 12r00r00         [24]  659 	lcall	__modsint
      000165 75*00 64         [24]  660 	mov	__divsint_PARM_2,#0x64
      000168 75*01 00         [24]  661 	mov	(__divsint_PARM_2 + 1),#0x00
      00016B 12r00r00         [24]  662 	lcall	__divsint
      00016E AE 82            [24]  663 	mov	r6,dpl
      000170 EE               [12]  664 	mov	a,r6
      000171 24r00            [12]  665 	add	a,#_smgduan
      000173 F9               [12]  666 	mov	r1,a
      000174 87 07            [24]  667 	mov	ar7,@r1
      000176 8F*15            [24]  668 	mov	(_Display + 0x0005),r7
                                    669 ;	main.c:93: Display[6] = smgduan[num%100/10];
      000178 AE*18            [24]  670 	mov	r6,_num
      00017A 7F 00            [12]  671 	mov	r7,#0x00
      00017C 75*00 64         [24]  672 	mov	__modsint_PARM_2,#0x64
                                    673 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00017F 8F*01            [24]  674 	mov	(__modsint_PARM_2 + 1),r7
      000181 8E 82            [24]  675 	mov	dpl,r6
      000183 8F 83            [24]  676 	mov	dph,r7
      000185 12r00r00         [24]  677 	lcall	__modsint
      000188 75*00 0A         [24]  678 	mov	__divsint_PARM_2,#0x0a
      00018B 75*01 00         [24]  679 	mov	(__divsint_PARM_2 + 1),#0x00
      00018E 12r00r00         [24]  680 	lcall	__divsint
      000191 AE 82            [24]  681 	mov	r6,dpl
      000193 EE               [12]  682 	mov	a,r6
      000194 24r00            [12]  683 	add	a,#_smgduan
      000196 F9               [12]  684 	mov	r1,a
      000197 87 07            [24]  685 	mov	ar7,@r1
      000199 8F*16            [24]  686 	mov	(_Display + 0x0006),r7
                                    687 ;	main.c:94: Display[7] = smgduan[num%10];
      00019B AE*18            [24]  688 	mov	r6,_num
      00019D 7F 00            [12]  689 	mov	r7,#0x00
      00019F 75*00 0A         [24]  690 	mov	__modsint_PARM_2,#0x0a
                                    691 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0001A2 8F*01            [24]  692 	mov	(__modsint_PARM_2 + 1),r7
      0001A4 8E 82            [24]  693 	mov	dpl,r6
      0001A6 8F 83            [24]  694 	mov	dph,r7
      0001A8 12r00r00         [24]  695 	lcall	__modsint
      0001AB AE 82            [24]  696 	mov	r6,dpl
      0001AD EE               [12]  697 	mov	a,r6
      0001AE 24r00            [12]  698 	add	a,#_smgduan
      0001B0 F9               [12]  699 	mov	r1,a
      0001B1 87 07            [24]  700 	mov	ar7,@r1
      0001B3 8F*17            [24]  701 	mov	(_Display + 0x0007),r7
                                    702 ;	main.c:95: }
      0001B5 22               [24]  703 	ret
                                    704 ;------------------------------------------------------------
                                    705 ;Allocation info for local variables in function 'main'
                                    706 ;------------------------------------------------------------
                                    707 ;	main.c:97: void main()
                                    708 ;	-----------------------------------------
                                    709 ;	 function main
                                    710 ;	-----------------------------------------
      0001B6                        711 _main:
                                    712 ;	main.c:99: while(1)
      0001B6                        713 00102$:
                                    714 ;	main.c:101: Keypros();
      0001B6 12r00rD9         [24]  715 	lcall	_Keypros
                                    716 ;	main.c:102: Digitspros();
      0001B9 12r01r39         [24]  717 	lcall	_Digitspros
                                    718 ;	main.c:103: DisplayDigits();
      0001BC 12r00r2E         [24]  719 	lcall	_DisplayDigits
                                    720 ;	main.c:105: }
      0001BF 80 F5            [24]  721 	sjmp	00102$
                                    722 	.area CSEG    (CODE)
                                    723 	.area CONST   (CODE)
                                    724 	.area XINIT   (CODE)
                                    725 	.area CABS    (ABS,CODE)
