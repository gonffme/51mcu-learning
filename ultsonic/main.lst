                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _TimerOut
                                     12 	.globl _main
                                     13 	.globl _Count
                                     14 	.globl _max
                                     15 	.globl _min
                                     16 	.globl _InitTimer
                                     17 	.globl _StartModule
                                     18 	.globl _Send_Str
                                     19 	.globl _Send_Char
                                     20 	.globl _DisplayDigits
                                     21 	.globl _DelayXus
                                     22 	.globl _delay
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _F1
                                     30 	.globl _P
                                     31 	.globl _PS
                                     32 	.globl _PT1
                                     33 	.globl _PX1
                                     34 	.globl _PT0
                                     35 	.globl _PX0
                                     36 	.globl _RD
                                     37 	.globl _WR
                                     38 	.globl _T1
                                     39 	.globl _T0
                                     40 	.globl _INT1
                                     41 	.globl _INT0
                                     42 	.globl _TXD
                                     43 	.globl _RXD
                                     44 	.globl _P3_7
                                     45 	.globl _P3_6
                                     46 	.globl _P3_5
                                     47 	.globl _P3_4
                                     48 	.globl _P3_3
                                     49 	.globl _P3_2
                                     50 	.globl _P3_1
                                     51 	.globl _P3_0
                                     52 	.globl _EA
                                     53 	.globl _ES
                                     54 	.globl _ET1
                                     55 	.globl _EX1
                                     56 	.globl _ET0
                                     57 	.globl _EX0
                                     58 	.globl _P2_7
                                     59 	.globl _P2_6
                                     60 	.globl _P2_5
                                     61 	.globl _P2_4
                                     62 	.globl _P2_3
                                     63 	.globl _P2_2
                                     64 	.globl _P2_1
                                     65 	.globl _P2_0
                                     66 	.globl _SM0
                                     67 	.globl _SM1
                                     68 	.globl _SM2
                                     69 	.globl _REN
                                     70 	.globl _TB8
                                     71 	.globl _RB8
                                     72 	.globl _TI
                                     73 	.globl _RI
                                     74 	.globl _P1_7
                                     75 	.globl _P1_6
                                     76 	.globl _P1_5
                                     77 	.globl _P1_4
                                     78 	.globl _P1_3
                                     79 	.globl _P1_2
                                     80 	.globl _P1_1
                                     81 	.globl _P1_0
                                     82 	.globl _TF1
                                     83 	.globl _TR1
                                     84 	.globl _TF0
                                     85 	.globl _TR0
                                     86 	.globl _IE1
                                     87 	.globl _IT1
                                     88 	.globl _IE0
                                     89 	.globl _IT0
                                     90 	.globl _P0_7
                                     91 	.globl _P0_6
                                     92 	.globl _P0_5
                                     93 	.globl _P0_4
                                     94 	.globl _P0_3
                                     95 	.globl _P0_2
                                     96 	.globl _P0_1
                                     97 	.globl _P0_0
                                     98 	.globl _B
                                     99 	.globl _ACC
                                    100 	.globl _PSW
                                    101 	.globl _IP
                                    102 	.globl _P3
                                    103 	.globl _IE
                                    104 	.globl _P2
                                    105 	.globl _SBUF
                                    106 	.globl _SCON
                                    107 	.globl _P1
                                    108 	.globl _TH1
                                    109 	.globl _TH0
                                    110 	.globl _TL1
                                    111 	.globl _TL0
                                    112 	.globl _TMOD
                                    113 	.globl _TCON
                                    114 	.globl _PCON
                                    115 	.globl _DPH
                                    116 	.globl _DPL
                                    117 	.globl _SP
                                    118 	.globl _P0
                                    119 	.globl _disp1
                                    120 	.globl _disp0
                                    121 	.globl _maxs
                                    122 	.globl _mins
                                    123 	.globl _ss
                                    124 	.globl _s
                                    125 	.globl _time
                                    126 	.globl _Display
                                    127 	.globl _smgduan
                                    128 	.globl _flag
                                    129 ;--------------------------------------------------------
                                    130 ; special function registers
                                    131 ;--------------------------------------------------------
                                    132 	.area RSEG    (ABS,DATA)
      000000                        133 	.org 0x0000
                           000080   134 _P0	=	0x0080
                           000081   135 _SP	=	0x0081
                           000082   136 _DPL	=	0x0082
                           000083   137 _DPH	=	0x0083
                           000087   138 _PCON	=	0x0087
                           000088   139 _TCON	=	0x0088
                           000089   140 _TMOD	=	0x0089
                           00008A   141 _TL0	=	0x008a
                           00008B   142 _TL1	=	0x008b
                           00008C   143 _TH0	=	0x008c
                           00008D   144 _TH1	=	0x008d
                           000090   145 _P1	=	0x0090
                           000098   146 _SCON	=	0x0098
                           000099   147 _SBUF	=	0x0099
                           0000A0   148 _P2	=	0x00a0
                           0000A8   149 _IE	=	0x00a8
                           0000B0   150 _P3	=	0x00b0
                           0000B8   151 _IP	=	0x00b8
                           0000D0   152 _PSW	=	0x00d0
                           0000E0   153 _ACC	=	0x00e0
                           0000F0   154 _B	=	0x00f0
                                    155 ;--------------------------------------------------------
                                    156 ; special function bits
                                    157 ;--------------------------------------------------------
                                    158 	.area RSEG    (ABS,DATA)
      000000                        159 	.org 0x0000
                           000080   160 _P0_0	=	0x0080
                           000081   161 _P0_1	=	0x0081
                           000082   162 _P0_2	=	0x0082
                           000083   163 _P0_3	=	0x0083
                           000084   164 _P0_4	=	0x0084
                           000085   165 _P0_5	=	0x0085
                           000086   166 _P0_6	=	0x0086
                           000087   167 _P0_7	=	0x0087
                           000088   168 _IT0	=	0x0088
                           000089   169 _IE0	=	0x0089
                           00008A   170 _IT1	=	0x008a
                           00008B   171 _IE1	=	0x008b
                           00008C   172 _TR0	=	0x008c
                           00008D   173 _TF0	=	0x008d
                           00008E   174 _TR1	=	0x008e
                           00008F   175 _TF1	=	0x008f
                           000090   176 _P1_0	=	0x0090
                           000091   177 _P1_1	=	0x0091
                           000092   178 _P1_2	=	0x0092
                           000093   179 _P1_3	=	0x0093
                           000094   180 _P1_4	=	0x0094
                           000095   181 _P1_5	=	0x0095
                           000096   182 _P1_6	=	0x0096
                           000097   183 _P1_7	=	0x0097
                           000098   184 _RI	=	0x0098
                           000099   185 _TI	=	0x0099
                           00009A   186 _RB8	=	0x009a
                           00009B   187 _TB8	=	0x009b
                           00009C   188 _REN	=	0x009c
                           00009D   189 _SM2	=	0x009d
                           00009E   190 _SM1	=	0x009e
                           00009F   191 _SM0	=	0x009f
                           0000A0   192 _P2_0	=	0x00a0
                           0000A1   193 _P2_1	=	0x00a1
                           0000A2   194 _P2_2	=	0x00a2
                           0000A3   195 _P2_3	=	0x00a3
                           0000A4   196 _P2_4	=	0x00a4
                           0000A5   197 _P2_5	=	0x00a5
                           0000A6   198 _P2_6	=	0x00a6
                           0000A7   199 _P2_7	=	0x00a7
                           0000A8   200 _EX0	=	0x00a8
                           0000A9   201 _ET0	=	0x00a9
                           0000AA   202 _EX1	=	0x00aa
                           0000AB   203 _ET1	=	0x00ab
                           0000AC   204 _ES	=	0x00ac
                           0000AF   205 _EA	=	0x00af
                           0000B0   206 _P3_0	=	0x00b0
                           0000B1   207 _P3_1	=	0x00b1
                           0000B2   208 _P3_2	=	0x00b2
                           0000B3   209 _P3_3	=	0x00b3
                           0000B4   210 _P3_4	=	0x00b4
                           0000B5   211 _P3_5	=	0x00b5
                           0000B6   212 _P3_6	=	0x00b6
                           0000B7   213 _P3_7	=	0x00b7
                           0000B0   214 _RXD	=	0x00b0
                           0000B1   215 _TXD	=	0x00b1
                           0000B2   216 _INT0	=	0x00b2
                           0000B3   217 _INT1	=	0x00b3
                           0000B4   218 _T0	=	0x00b4
                           0000B5   219 _T1	=	0x00b5
                           0000B6   220 _WR	=	0x00b6
                           0000B7   221 _RD	=	0x00b7
                           0000B8   222 _PX0	=	0x00b8
                           0000B9   223 _PT0	=	0x00b9
                           0000BA   224 _PX1	=	0x00ba
                           0000BB   225 _PT1	=	0x00bb
                           0000BC   226 _PS	=	0x00bc
                           0000D0   227 _P	=	0x00d0
                           0000D1   228 _F1	=	0x00d1
                           0000D2   229 _OV	=	0x00d2
                           0000D3   230 _RS0	=	0x00d3
                           0000D4   231 _RS1	=	0x00d4
                           0000D5   232 _F0	=	0x00d5
                           0000D6   233 _AC	=	0x00d6
                           0000D7   234 _CY	=	0x00d7
                                    235 ;--------------------------------------------------------
                                    236 ; overlayable register banks
                                    237 ;--------------------------------------------------------
                                    238 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        239 	.ds 8
                                    240 ;--------------------------------------------------------
                                    241 ; internal ram data
                                    242 ;--------------------------------------------------------
                                    243 	.area DSEG    (DATA)
      000000                        244 _flag::
      000000                        245 	.ds 1
      000001                        246 _smgduan::
      000001                        247 	.ds 16
      000011                        248 _Display::
      000011                        249 	.ds 8
      000019                        250 _time::
      000019                        251 	.ds 2
      00001B                        252 _s::
      00001B                        253 	.ds 2
      00001D                        254 _ss::
      00001D                        255 	.ds 8
      000025                        256 _mins::
      000025                        257 	.ds 2
      000027                        258 _maxs::
      000027                        259 	.ds 2
      000029                        260 _disp0::
      000029                        261 	.ds 10
      000033                        262 _disp1::
      000033                        263 	.ds 4
                                    264 ;--------------------------------------------------------
                                    265 ; overlayable items in internal ram 
                                    266 ;--------------------------------------------------------
                                    267 	.area	OSEG    (OVR,DATA)
                                    268 	.area	OSEG    (OVR,DATA)
                                    269 	.area	OSEG    (OVR,DATA)
                                    270 	.area	OSEG    (OVR,DATA)
                                    271 	.area	OSEG    (OVR,DATA)
                                    272 	.area	OSEG    (OVR,DATA)
                                    273 ;--------------------------------------------------------
                                    274 ; Stack segment in internal ram 
                                    275 ;--------------------------------------------------------
                                    276 	.area	SSEG
      000000                        277 __start__stack:
      000000                        278 	.ds	1
                                    279 
                                    280 ;--------------------------------------------------------
                                    281 ; indirectly addressable internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area ISEG    (DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; absolute internal ram data
                                    286 ;--------------------------------------------------------
                                    287 	.area IABS    (ABS,DATA)
                                    288 	.area IABS    (ABS,DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; bit data
                                    291 ;--------------------------------------------------------
                                    292 	.area BSEG    (BIT)
                                    293 ;--------------------------------------------------------
                                    294 ; paged external ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area PSEG    (PAG,XDATA)
                                    297 ;--------------------------------------------------------
                                    298 ; external ram data
                                    299 ;--------------------------------------------------------
                                    300 	.area XSEG    (XDATA)
                                    301 ;--------------------------------------------------------
                                    302 ; absolute external ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area XABS    (ABS,XDATA)
                                    305 ;--------------------------------------------------------
                                    306 ; external initialized ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area XISEG   (XDATA)
                                    309 	.area HOME    (CODE)
                                    310 	.area GSINIT0 (CODE)
                                    311 	.area GSINIT1 (CODE)
                                    312 	.area GSINIT2 (CODE)
                                    313 	.area GSINIT3 (CODE)
                                    314 	.area GSINIT4 (CODE)
                                    315 	.area GSINIT5 (CODE)
                                    316 	.area GSINIT  (CODE)
                                    317 	.area GSFINAL (CODE)
                                    318 	.area CSEG    (CODE)
                                    319 ;--------------------------------------------------------
                                    320 ; interrupt vector 
                                    321 ;--------------------------------------------------------
                                    322 	.area HOME    (CODE)
      000000                        323 __interrupt_vect:
      000000 02r00r00         [24]  324 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  325 	reti
      000004                        326 	.ds	7
      00000B 02r04r60         [24]  327 	ljmp	_TimerOut
                                    328 ;--------------------------------------------------------
                                    329 ; global & static initialisations
                                    330 ;--------------------------------------------------------
                                    331 	.area HOME    (CODE)
                                    332 	.area GSINIT  (CODE)
                                    333 	.area GSFINAL (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 	.globl __sdcc_gsinit_startup
                                    336 	.globl __sdcc_program_startup
                                    337 	.globl __start__stack
                                    338 	.globl __mcs51_genXINIT
                                    339 	.globl __mcs51_genXRAMCLEAR
                                    340 	.globl __mcs51_genRAMCLEAR
                                    341 ;	main.c:7: uchar flag=0;
      000000 75*00 00         [24]  342 	mov	_flag,#0x00
                                    343 ;	main.c:28: uchar smgduan[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 
      000003 75*01 3F         [24]  344 	mov	_smgduan,#0x3f
      000006 75*02 06         [24]  345 	mov	(_smgduan + 0x0001),#0x06
      000009 75*03 5B         [24]  346 	mov	(_smgduan + 0x0002),#0x5b
      00000C 75*04 4F         [24]  347 	mov	(_smgduan + 0x0003),#0x4f
      00000F 75*05 66         [24]  348 	mov	(_smgduan + 0x0004),#0x66
      000012 75*06 6D         [24]  349 	mov	(_smgduan + 0x0005),#0x6d
      000015 75*07 7D         [24]  350 	mov	(_smgduan + 0x0006),#0x7d
      000018 75*08 07         [24]  351 	mov	(_smgduan + 0x0007),#0x07
      00001B 75*09 7F         [24]  352 	mov	(_smgduan + 0x0008),#0x7f
      00001E 75*0A 6F         [24]  353 	mov	(_smgduan + 0x0009),#0x6f
      000021 75*0B 77         [24]  354 	mov	(_smgduan + 0x000a),#0x77
      000024 75*0C 7C         [24]  355 	mov	(_smgduan + 0x000b),#0x7c
      000027 75*0D 39         [24]  356 	mov	(_smgduan + 0x000c),#0x39
      00002A 75*0E 5E         [24]  357 	mov	(_smgduan + 0x000d),#0x5e
      00002D 75*0F 79         [24]  358 	mov	(_smgduan + 0x000e),#0x79
      000030 75*10 71         [24]  359 	mov	(_smgduan + 0x000f),#0x71
                                    360 ;	main.c:30: uchar Display[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      000033 75*11 00         [24]  361 	mov	_Display,#0x00
      000036 75*12 00         [24]  362 	mov	(_Display + 0x0001),#0x00
      000039 75*13 00         [24]  363 	mov	(_Display + 0x0002),#0x00
      00003C 75*14 00         [24]  364 	mov	(_Display + 0x0003),#0x00
      00003F 75*15 00         [24]  365 	mov	(_Display + 0x0004),#0x00
      000042 75*16 00         [24]  366 	mov	(_Display + 0x0005),#0x00
      000045 75*17 00         [24]  367 	mov	(_Display + 0x0006),#0x00
      000048 75*18 00         [24]  368 	mov	(_Display + 0x0007),#0x00
                                    369 ;	main.c:121: uint ss[4] = {0, 0, 0, 0};
      00004B E4               [12]  370 	clr	a
      00004C F5*1D            [12]  371 	mov	(_ss + 0),a
      00004E F5*1E            [12]  372 	mov	(_ss + 1),a
      000050 F5*1F            [12]  373 	mov	((_ss + 0x0002) + 0),a
      000052 F5*20            [12]  374 	mov	((_ss + 0x0002) + 1),a
      000054 F5*21            [12]  375 	mov	((_ss + 0x0004) + 0),a
      000056 F5*22            [12]  376 	mov	((_ss + 0x0004) + 1),a
      000058 F5*23            [12]  377 	mov	((_ss + 0x0006) + 0),a
      00005A F5*24            [12]  378 	mov	((_ss + 0x0006) + 1),a
                                    379 ;	main.c:123: uchar disp0[] = "distance ";
      00005C 75*29 64         [24]  380 	mov	_disp0,#0x64
      00005F 75*2A 69         [24]  381 	mov	(_disp0 + 0x0001),#0x69
      000062 75*2B 73         [24]  382 	mov	(_disp0 + 0x0002),#0x73
      000065 75*2C 74         [24]  383 	mov	(_disp0 + 0x0003),#0x74
      000068 75*2D 61         [24]  384 	mov	(_disp0 + 0x0004),#0x61
      00006B 75*2E 6E         [24]  385 	mov	(_disp0 + 0x0005),#0x6e
      00006E 75*2F 63         [24]  386 	mov	(_disp0 + 0x0006),#0x63
      000071 75*30 65         [24]  387 	mov	(_disp0 + 0x0007),#0x65
      000074 75*31 20         [24]  388 	mov	(_disp0 + 0x0008),#0x20
                                    389 ;	1-genFromRTrack replaced	mov	(_disp0 + 0x0009),#0x00
      000077 F5*32            [12]  390 	mov	(_disp0 + 0x0009),a
                                    391 ;	main.c:124: uchar disp1[] = "mm\n";
      000079 75*33 6D         [24]  392 	mov	_disp1,#0x6d
      00007C 75*34 6D         [24]  393 	mov	(_disp1 + 0x0001),#0x6d
      00007F 75*35 0A         [24]  394 	mov	(_disp1 + 0x0002),#0x0a
                                    395 ;	1-genFromRTrack replaced	mov	(_disp1 + 0x0003),#0x00
      000082 F5*36            [12]  396 	mov	(_disp1 + 0x0003),a
                                    397 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  398 	ljmp	__sdcc_program_startup
                                    399 ;--------------------------------------------------------
                                    400 ; Home
                                    401 ;--------------------------------------------------------
                                    402 	.area HOME    (CODE)
                                    403 	.area HOME    (CODE)
      00000E                        404 __sdcc_program_startup:
      00000E 02r03r8D         [24]  405 	ljmp	_main
                                    406 ;	return from main will return to caller
                                    407 ;--------------------------------------------------------
                                    408 ; code
                                    409 ;--------------------------------------------------------
                                    410 	.area CSEG    (CODE)
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'delay'
                                    413 ;------------------------------------------------------------
                                    414 ;i                         Allocated to registers 
                                    415 ;------------------------------------------------------------
                                    416 ;	main.c:10: void delay(uint i)
                                    417 ;	-----------------------------------------
                                    418 ;	 function delay
                                    419 ;	-----------------------------------------
      000000                        420 _delay:
                           000007   421 	ar7 = 0x07
                           000006   422 	ar6 = 0x06
                           000005   423 	ar5 = 0x05
                           000004   424 	ar4 = 0x04
                           000003   425 	ar3 = 0x03
                           000002   426 	ar2 = 0x02
                           000001   427 	ar1 = 0x01
                           000000   428 	ar0 = 0x00
      000000 AE 82            [24]  429 	mov	r6,dpl
      000002 AF 83            [24]  430 	mov	r7,dph
                                    431 ;	main.c:12: while(i--);
      000004                        432 00101$:
      000004 8E 04            [24]  433 	mov	ar4,r6
      000006 8F 05            [24]  434 	mov	ar5,r7
      000008 1E               [12]  435 	dec	r6
      000009 BE FF 01         [24]  436 	cjne	r6,#0xff,00111$
      00000C 1F               [12]  437 	dec	r7
      00000D                        438 00111$:
      00000D EC               [12]  439 	mov	a,r4
      00000E 4D               [12]  440 	orl	a,r5
      00000F 70 F3            [24]  441 	jnz	00101$
                                    442 ;	main.c:13: }
      000011 22               [24]  443 	ret
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'DelayXus'
                                    446 ;------------------------------------------------------------
                                    447 ;x                         Allocated to registers 
                                    448 ;i                         Allocated to registers r5 
                                    449 ;------------------------------------------------------------
                                    450 ;	main.c:15: void DelayXus(uint x)
                                    451 ;	-----------------------------------------
                                    452 ;	 function DelayXus
                                    453 ;	-----------------------------------------
      000012                        454 _DelayXus:
      000012 AE 82            [24]  455 	mov	r6,dpl
      000014 AF 83            [24]  456 	mov	r7,dph
                                    457 ;	main.c:18: while(x--)
      000016                        458 00102$:
      000016 8E 04            [24]  459 	mov	ar4,r6
      000018 8F 05            [24]  460 	mov	ar5,r7
      00001A 1E               [12]  461 	dec	r6
      00001B BE FF 01         [24]  462 	cjne	r6,#0xff,00127$
      00001E 1F               [12]  463 	dec	r7
      00001F                        464 00127$:
      00001F EC               [12]  465 	mov	a,r4
      000020 4D               [12]  466 	orl	a,r5
      000021 60 0A            [24]  467 	jz	00108$
                                    468 ;	main.c:20: for(i=0;i<100;i++);
      000023 7D 64            [12]  469 	mov	r5,#0x64
      000025                        470 00107$:
      000025 ED               [12]  471 	mov	a,r5
      000026 14               [12]  472 	dec	a
      000027 FC               [12]  473 	mov	r4,a
      000028 FD               [12]  474 	mov	r5,a
      000029 70 FA            [24]  475 	jnz	00107$
      00002B 80 E9            [24]  476 	sjmp	00102$
      00002D                        477 00108$:
                                    478 ;	main.c:22: }
      00002D 22               [24]  479 	ret
                                    480 ;------------------------------------------------------------
                                    481 ;Allocation info for local variables in function 'DisplayDigits'
                                    482 ;------------------------------------------------------------
                                    483 ;i                         Allocated to registers r7 
                                    484 ;------------------------------------------------------------
                                    485 ;	main.c:31: void DisplayDigits()
                                    486 ;	-----------------------------------------
                                    487 ;	 function DisplayDigits
                                    488 ;	-----------------------------------------
      00002E                        489 _DisplayDigits:
                                    490 ;	main.c:34: for(i=0;i<8;i++)
      00002E 7F 00            [12]  491 	mov	r7,#0x00
      000030                        492 00102$:
                                    493 ;	main.c:36: LSC = i / 4;
      000030 8F 05            [24]  494 	mov	ar5,r7
      000032 7E 00            [12]  495 	mov	r6,#0x00
      000034 75*00 04         [24]  496 	mov	__divsint_PARM_2,#0x04
                                    497 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000037 8E*01            [24]  498 	mov	(__divsint_PARM_2 + 1),r6
      000039 8D 82            [24]  499 	mov	dpl,r5
      00003B 8E 83            [24]  500 	mov	dph,r6
      00003D C0 07            [24]  501 	push	ar7
      00003F C0 06            [24]  502 	push	ar6
      000041 C0 05            [24]  503 	push	ar5
      000043 12r00r00         [24]  504 	lcall	__divsint
      000046 AB 82            [24]  505 	mov	r3,dpl
      000048 AC 83            [24]  506 	mov	r4,dph
      00004A D0 05            [24]  507 	pop	ar5
      00004C D0 06            [24]  508 	pop	ar6
                                    509 ;	assignBit
      00004E EB               [12]  510 	mov	a,r3
      00004F 4C               [12]  511 	orl	a,r4
      000050 24 FF            [12]  512 	add	a,#0xff
      000052 92 A4            [24]  513 	mov	_P2_4,c
                                    514 ;	main.c:37: LSB = (i-4*LSC) / 2;
      000054 A2 A4            [12]  515 	mov	c,_P2_4
      000056 E4               [12]  516 	clr	a
      000057 33               [12]  517 	rlc	a
      000058 7C 00            [12]  518 	mov	r4,#0x00
      00005A 25 E0            [12]  519 	add	a,acc
      00005C FB               [12]  520 	mov	r3,a
      00005D EC               [12]  521 	mov	a,r4
      00005E 33               [12]  522 	rlc	a
      00005F FC               [12]  523 	mov	r4,a
      000060 EB               [12]  524 	mov	a,r3
      000061 2B               [12]  525 	add	a,r3
      000062 FB               [12]  526 	mov	r3,a
      000063 EC               [12]  527 	mov	a,r4
      000064 33               [12]  528 	rlc	a
      000065 FC               [12]  529 	mov	r4,a
      000066 ED               [12]  530 	mov	a,r5
      000067 C3               [12]  531 	clr	c
      000068 9B               [12]  532 	subb	a,r3
      000069 F5 82            [12]  533 	mov	dpl,a
      00006B EE               [12]  534 	mov	a,r6
      00006C 9C               [12]  535 	subb	a,r4
      00006D F5 83            [12]  536 	mov	dph,a
      00006F 75*00 02         [24]  537 	mov	__divsint_PARM_2,#0x02
      000072 75*01 00         [24]  538 	mov	(__divsint_PARM_2 + 1),#0x00
      000075 C0 06            [24]  539 	push	ar6
      000077 C0 05            [24]  540 	push	ar5
      000079 12r00r00         [24]  541 	lcall	__divsint
      00007C AB 82            [24]  542 	mov	r3,dpl
      00007E AC 83            [24]  543 	mov	r4,dph
      000080 D0 05            [24]  544 	pop	ar5
      000082 D0 06            [24]  545 	pop	ar6
      000084 D0 07            [24]  546 	pop	ar7
                                    547 ;	assignBit
      000086 EB               [12]  548 	mov	a,r3
      000087 4C               [12]  549 	orl	a,r4
      000088 24 FF            [12]  550 	add	a,#0xff
      00008A 92 A3            [24]  551 	mov	_P2_3,c
                                    552 ;	main.c:38: LSA = i - 4*LSC - 2*LSB;
      00008C A2 A4            [12]  553 	mov	c,_P2_4
      00008E E4               [12]  554 	clr	a
      00008F 33               [12]  555 	rlc	a
      000090 7C 00            [12]  556 	mov	r4,#0x00
      000092 25 E0            [12]  557 	add	a,acc
      000094 FB               [12]  558 	mov	r3,a
      000095 EC               [12]  559 	mov	a,r4
      000096 33               [12]  560 	rlc	a
      000097 FC               [12]  561 	mov	r4,a
      000098 EB               [12]  562 	mov	a,r3
      000099 2B               [12]  563 	add	a,r3
      00009A FB               [12]  564 	mov	r3,a
      00009B EC               [12]  565 	mov	a,r4
      00009C 33               [12]  566 	rlc	a
      00009D FC               [12]  567 	mov	r4,a
      00009E ED               [12]  568 	mov	a,r5
      00009F C3               [12]  569 	clr	c
      0000A0 9B               [12]  570 	subb	a,r3
      0000A1 FD               [12]  571 	mov	r5,a
      0000A2 EE               [12]  572 	mov	a,r6
      0000A3 9C               [12]  573 	subb	a,r4
      0000A4 FE               [12]  574 	mov	r6,a
      0000A5 A2 A3            [12]  575 	mov	c,_P2_3
      0000A7 E4               [12]  576 	clr	a
      0000A8 33               [12]  577 	rlc	a
      0000A9 7C 00            [12]  578 	mov	r4,#0x00
      0000AB 25 E0            [12]  579 	add	a,acc
      0000AD FB               [12]  580 	mov	r3,a
      0000AE EC               [12]  581 	mov	a,r4
      0000AF 33               [12]  582 	rlc	a
      0000B0 FC               [12]  583 	mov	r4,a
      0000B1 ED               [12]  584 	mov	a,r5
      0000B2 C3               [12]  585 	clr	c
      0000B3 9B               [12]  586 	subb	a,r3
      0000B4 FD               [12]  587 	mov	r5,a
      0000B5 EE               [12]  588 	mov	a,r6
      0000B6 9C               [12]  589 	subb	a,r4
                                    590 ;	assignBit
      0000B7 4D               [12]  591 	orl	a,r5
      0000B8 24 FF            [12]  592 	add	a,#0xff
      0000BA 92 A2            [24]  593 	mov	_P2_2,c
                                    594 ;	main.c:39: P0 = Display[i];
      0000BC EF               [12]  595 	mov	a,r7
      0000BD 24r11            [12]  596 	add	a,#_Display
      0000BF F9               [12]  597 	mov	r1,a
      0000C0 87 80            [24]  598 	mov	_P0,@r1
                                    599 ;	main.c:40: delay(200);
      0000C2 90 00 C8         [24]  600 	mov	dptr,#0x00c8
      0000C5 C0 07            [24]  601 	push	ar7
      0000C7 12r00r00         [24]  602 	lcall	_delay
      0000CA D0 07            [24]  603 	pop	ar7
                                    604 ;	main.c:34: for(i=0;i<8;i++)
      0000CC 0F               [12]  605 	inc	r7
      0000CD BF 08 00         [24]  606 	cjne	r7,#0x08,00111$
      0000D0                        607 00111$:
      0000D0 50 03            [24]  608 	jnc	00112$
      0000D2 02r00r30         [24]  609 	ljmp	00102$
      0000D5                        610 00112$:
                                    611 ;	main.c:42: }
      0000D5 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'Send_Char'
                                    615 ;------------------------------------------------------------
                                    616 ;chr                       Allocated to registers r7 
                                    617 ;------------------------------------------------------------
                                    618 ;	main.c:44: void Send_Char(uchar chr)
                                    619 ;	-----------------------------------------
                                    620 ;	 function Send_Char
                                    621 ;	-----------------------------------------
      0000D6                        622 _Send_Char:
      0000D6 AF 82            [24]  623 	mov	r7,dpl
                                    624 ;	main.c:46: ES = 0;
                                    625 ;	assignBit
      0000D8 C2 AC            [12]  626 	clr	_ES
                                    627 ;	main.c:47: SBUF = chr;
      0000DA 8F 99            [24]  628 	mov	_SBUF,r7
                                    629 ;	main.c:48: while(!TI);
      0000DC                        630 00101$:
                                    631 ;	main.c:49: TI = 0;
                                    632 ;	assignBit
      0000DC 10 99 02         [24]  633 	jbc	_TI,00114$
      0000DF 80 FB            [24]  634 	sjmp	00101$
      0000E1                        635 00114$:
                                    636 ;	main.c:50: ES = 1;
                                    637 ;	assignBit
      0000E1 D2 AC            [12]  638 	setb	_ES
                                    639 ;	main.c:51: }
      0000E3 22               [24]  640 	ret
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'Send_Str'
                                    643 ;------------------------------------------------------------
                                    644 ;str                       Allocated to registers 
                                    645 ;------------------------------------------------------------
                                    646 ;	main.c:53: void Send_Str(uchar *str)
                                    647 ;	-----------------------------------------
                                    648 ;	 function Send_Str
                                    649 ;	-----------------------------------------
      0000E4                        650 _Send_Str:
      0000E4 AD 82            [24]  651 	mov	r5,dpl
      0000E6 AE 83            [24]  652 	mov	r6,dph
      0000E8 AF F0            [24]  653 	mov	r7,b
                                    654 ;	main.c:55: while(*str != '\0')
      0000EA                        655 00104$:
      0000EA 8D 82            [24]  656 	mov	dpl,r5
      0000EC 8E 83            [24]  657 	mov	dph,r6
      0000EE 8F F0            [24]  658 	mov	b,r7
      0000F0 12r00r00         [24]  659 	lcall	__gptrget
      0000F3 60 1B            [24]  660 	jz	00107$
                                    661 ;	main.c:57: ES = 0;
                                    662 ;	assignBit
      0000F5 C2 AC            [12]  663 	clr	_ES
                                    664 ;	main.c:58: SBUF = *str;
      0000F7 8D 82            [24]  665 	mov	dpl,r5
      0000F9 8E 83            [24]  666 	mov	dph,r6
      0000FB 8F F0            [24]  667 	mov	b,r7
      0000FD 12r00r00         [24]  668 	lcall	__gptrget
      000100 F5 99            [12]  669 	mov	_SBUF,a
                                    670 ;	main.c:59: while(!TI);
      000102                        671 00101$:
                                    672 ;	main.c:60: TI = 0;
                                    673 ;	assignBit
      000102 10 99 02         [24]  674 	jbc	_TI,00127$
      000105 80 FB            [24]  675 	sjmp	00101$
      000107                        676 00127$:
                                    677 ;	main.c:61: ES = 1;
                                    678 ;	assignBit
      000107 D2 AC            [12]  679 	setb	_ES
                                    680 ;	main.c:62: str++;
      000109 0D               [12]  681 	inc	r5
      00010A BD 00 DD         [24]  682 	cjne	r5,#0x00,00104$
      00010D 0E               [12]  683 	inc	r6
      00010E 80 DA            [24]  684 	sjmp	00104$
      000110                        685 00107$:
                                    686 ;	main.c:64: }
      000110 22               [24]  687 	ret
                                    688 ;------------------------------------------------------------
                                    689 ;Allocation info for local variables in function 'StartModule'
                                    690 ;------------------------------------------------------------
                                    691 ;	main.c:69: void StartModule()
                                    692 ;	-----------------------------------------
                                    693 ;	 function StartModule
                                    694 ;	-----------------------------------------
      000111                        695 _StartModule:
                                    696 ;	main.c:71: Trig = 1;
                                    697 ;	assignBit
      000111 D2 91            [12]  698 	setb	_P1_1
                                    699 ;	main.c:72: delay(2);
      000113 90 00 02         [24]  700 	mov	dptr,#0x0002
      000116 12r00r00         [24]  701 	lcall	_delay
                                    702 ;	main.c:73: Trig = 0;	
                                    703 ;	assignBit
      000119 C2 91            [12]  704 	clr	_P1_1
                                    705 ;	main.c:74: }
      00011B 22               [24]  706 	ret
                                    707 ;------------------------------------------------------------
                                    708 ;Allocation info for local variables in function 'InitTimer'
                                    709 ;------------------------------------------------------------
                                    710 ;	main.c:80: void InitTimer()
                                    711 ;	-----------------------------------------
                                    712 ;	 function InitTimer
                                    713 ;	-----------------------------------------
      00011C                        714 _InitTimer:
                                    715 ;	main.c:82: TMOD = 0x21;
      00011C 75 89 21         [24]  716 	mov	_TMOD,#0x21
                                    717 ;	main.c:83: PCON |= 0x80;
      00011F AE 87            [24]  718 	mov	r6,_PCON
      000121 43 06 80         [24]  719 	orl	ar6,#0x80
      000124 8E 87            [24]  720 	mov	_PCON,r6
                                    721 ;	main.c:85: SCON = 0x50;
      000126 75 98 50         [24]  722 	mov	_SCON,#0x50
                                    723 ;	main.c:86: TH1 = SPEED;
      000129 75 8D FF         [24]  724 	mov	_TH1,#0xff
                                    725 ;	main.c:87: TL1 = SPEED;
      00012C 75 8B FF         [24]  726 	mov	_TL1,#0xff
                                    727 ;	main.c:88: TH0 = 0;
      00012F 75 8C 00         [24]  728 	mov	_TH0,#0x00
                                    729 ;	main.c:89: TL0 = 0;
      000132 75 8A 00         [24]  730 	mov	_TL0,#0x00
                                    731 ;	main.c:90: TR1 = 1;
                                    732 ;	assignBit
      000135 D2 8E            [12]  733 	setb	_TR1
                                    734 ;	main.c:91: EA = 1;
                                    735 ;	assignBit
      000137 D2 AF            [12]  736 	setb	_EA
                                    737 ;	main.c:92: ES = 1;
                                    738 ;	assignBit
      000139 D2 AC            [12]  739 	setb	_ES
                                    740 ;	main.c:93: }
      00013B 22               [24]  741 	ret
                                    742 ;------------------------------------------------------------
                                    743 ;Allocation info for local variables in function 'min'
                                    744 ;------------------------------------------------------------
                                    745 ;s                         Allocated to registers r5 r6 r7 
                                    746 ;temp                      Allocated to registers r3 r4 
                                    747 ;i                         Allocated to registers r2 
                                    748 ;------------------------------------------------------------
                                    749 ;	main.c:95: uint min(uint * s)
                                    750 ;	-----------------------------------------
                                    751 ;	 function min
                                    752 ;	-----------------------------------------
      00013C                        753 _min:
                                    754 ;	main.c:97: uint temp=*s;
      00013C AD 82            [24]  755 	mov	r5,dpl
      00013E AE 83            [24]  756 	mov	r6,dph
      000140 AF F0            [24]  757 	mov	r7,b
      000142 12r00r00         [24]  758 	lcall	__gptrget
      000145 FB               [12]  759 	mov	r3,a
      000146 A3               [24]  760 	inc	dptr
      000147 12r00r00         [24]  761 	lcall	__gptrget
      00014A FC               [12]  762 	mov	r4,a
                                    763 ;	main.c:99: for(i=0;i<3;i++)
      00014B 7A 00            [12]  764 	mov	r2,#0x00
      00014D                        765 00104$:
                                    766 ;	main.c:101: s+=1;
      00014D 74 02            [12]  767 	mov	a,#0x02
      00014F 2D               [12]  768 	add	a,r5
      000150 FD               [12]  769 	mov	r5,a
      000151 E4               [12]  770 	clr	a
      000152 3E               [12]  771 	addc	a,r6
      000153 FE               [12]  772 	mov	r6,a
                                    773 ;	main.c:102: if(temp>*s)temp=*s;
      000154 8D 82            [24]  774 	mov	dpl,r5
      000156 8E 83            [24]  775 	mov	dph,r6
      000158 8F F0            [24]  776 	mov	b,r7
      00015A 12r00r00         [24]  777 	lcall	__gptrget
      00015D F8               [12]  778 	mov	r0,a
      00015E A3               [24]  779 	inc	dptr
      00015F 12r00r00         [24]  780 	lcall	__gptrget
      000162 F9               [12]  781 	mov	r1,a
      000163 C3               [12]  782 	clr	c
      000164 E8               [12]  783 	mov	a,r0
      000165 9B               [12]  784 	subb	a,r3
      000166 E9               [12]  785 	mov	a,r1
      000167 9C               [12]  786 	subb	a,r4
      000168 50 04            [24]  787 	jnc	00105$
      00016A 88 03            [24]  788 	mov	ar3,r0
      00016C 89 04            [24]  789 	mov	ar4,r1
      00016E                        790 00105$:
                                    791 ;	main.c:99: for(i=0;i<3;i++)
      00016E 0A               [12]  792 	inc	r2
      00016F BA 03 00         [24]  793 	cjne	r2,#0x03,00122$
      000172                        794 00122$:
      000172 40 D9            [24]  795 	jc	00104$
                                    796 ;	main.c:104: return temp;
      000174 8B 82            [24]  797 	mov	dpl,r3
      000176 8C 83            [24]  798 	mov	dph,r4
                                    799 ;	main.c:105: }
      000178 22               [24]  800 	ret
                                    801 ;------------------------------------------------------------
                                    802 ;Allocation info for local variables in function 'max'
                                    803 ;------------------------------------------------------------
                                    804 ;s                         Allocated to registers r5 r6 r7 
                                    805 ;temp                      Allocated to registers r3 r4 
                                    806 ;i                         Allocated to registers r2 
                                    807 ;------------------------------------------------------------
                                    808 ;	main.c:107: uint max(uint * s)
                                    809 ;	-----------------------------------------
                                    810 ;	 function max
                                    811 ;	-----------------------------------------
      000179                        812 _max:
                                    813 ;	main.c:109: uint temp=*s;
      000179 AD 82            [24]  814 	mov	r5,dpl
      00017B AE 83            [24]  815 	mov	r6,dph
      00017D AF F0            [24]  816 	mov	r7,b
      00017F 12r00r00         [24]  817 	lcall	__gptrget
      000182 FB               [12]  818 	mov	r3,a
      000183 A3               [24]  819 	inc	dptr
      000184 12r00r00         [24]  820 	lcall	__gptrget
      000187 FC               [12]  821 	mov	r4,a
                                    822 ;	main.c:111: for(i=0;i<3;i++)
      000188 7A 00            [12]  823 	mov	r2,#0x00
      00018A                        824 00104$:
                                    825 ;	main.c:113: s+=1;
      00018A 74 02            [12]  826 	mov	a,#0x02
      00018C 2D               [12]  827 	add	a,r5
      00018D FD               [12]  828 	mov	r5,a
      00018E E4               [12]  829 	clr	a
      00018F 3E               [12]  830 	addc	a,r6
      000190 FE               [12]  831 	mov	r6,a
                                    832 ;	main.c:114: if(temp<*s)temp=*s;
      000191 8D 82            [24]  833 	mov	dpl,r5
      000193 8E 83            [24]  834 	mov	dph,r6
      000195 8F F0            [24]  835 	mov	b,r7
      000197 12r00r00         [24]  836 	lcall	__gptrget
      00019A F8               [12]  837 	mov	r0,a
      00019B A3               [24]  838 	inc	dptr
      00019C 12r00r00         [24]  839 	lcall	__gptrget
      00019F F9               [12]  840 	mov	r1,a
      0001A0 C3               [12]  841 	clr	c
      0001A1 EB               [12]  842 	mov	a,r3
      0001A2 98               [12]  843 	subb	a,r0
      0001A3 EC               [12]  844 	mov	a,r4
      0001A4 99               [12]  845 	subb	a,r1
      0001A5 50 04            [24]  846 	jnc	00105$
      0001A7 88 03            [24]  847 	mov	ar3,r0
      0001A9 89 04            [24]  848 	mov	ar4,r1
      0001AB                        849 00105$:
                                    850 ;	main.c:111: for(i=0;i<3;i++)
      0001AB 0A               [12]  851 	inc	r2
      0001AC BA 03 00         [24]  852 	cjne	r2,#0x03,00122$
      0001AF                        853 00122$:
      0001AF 40 D9            [24]  854 	jc	00104$
                                    855 ;	main.c:116: return temp;
      0001B1 8B 82            [24]  856 	mov	dpl,r3
      0001B3 8C 83            [24]  857 	mov	dph,r4
                                    858 ;	main.c:117: }
      0001B5 22               [24]  859 	ret
                                    860 ;------------------------------------------------------------
                                    861 ;Allocation info for local variables in function 'Count'
                                    862 ;------------------------------------------------------------
                                    863 ;di1                       Allocated to registers r6 
                                    864 ;di2                       Allocated to registers r5 
                                    865 ;di3                       Allocated to registers r4 
                                    866 ;di4                       Allocated to registers r3 
                                    867 ;------------------------------------------------------------
                                    868 ;	main.c:125: void Count()
                                    869 ;	-----------------------------------------
                                    870 ;	 function Count
                                    871 ;	-----------------------------------------
      0001B6                        872 _Count:
                                    873 ;	main.c:130: mins = min(ss);
      0001B6 90r00r1D         [24]  874 	mov	dptr,#_ss
      0001B9 75 F0 40         [24]  875 	mov	b,#0x40
      0001BC 12r01r3C         [24]  876 	lcall	_min
      0001BF 85 82*25         [24]  877 	mov	_mins,dpl
      0001C2 85 83*26         [24]  878 	mov	(_mins + 1),dph
                                    879 ;	main.c:131: maxs = max(ss);
      0001C5 90r00r1D         [24]  880 	mov	dptr,#_ss
      0001C8 75 F0 40         [24]  881 	mov	b,#0x40
      0001CB 12r01r79         [24]  882 	lcall	_max
      0001CE 85 82*27         [24]  883 	mov	_maxs,dpl
      0001D1 85 83*28         [24]  884 	mov	(_maxs + 1),dph
                                    885 ;	main.c:132: s = (ss[0]+ss[1]+ss[2]+ss[3]-mins-maxs)/2;
      0001D4 E5*1F            [12]  886 	mov	a,(_ss + 0x0002)
      0001D6 25*1D            [12]  887 	add	a,_ss
      0001D8 FE               [12]  888 	mov	r6,a
      0001D9 E5*20            [12]  889 	mov	a,((_ss + 0x0002) + 1)
      0001DB 35*1E            [12]  890 	addc	a,(_ss + 1)
      0001DD FF               [12]  891 	mov	r7,a
      0001DE E5*21            [12]  892 	mov	a,(_ss + 0x0004)
      0001E0 2E               [12]  893 	add	a,r6
      0001E1 FE               [12]  894 	mov	r6,a
      0001E2 E5*22            [12]  895 	mov	a,((_ss + 0x0004) + 1)
      0001E4 3F               [12]  896 	addc	a,r7
      0001E5 FF               [12]  897 	mov	r7,a
      0001E6 E5*23            [12]  898 	mov	a,(_ss + 0x0006)
      0001E8 2E               [12]  899 	add	a,r6
      0001E9 FE               [12]  900 	mov	r6,a
      0001EA E5*24            [12]  901 	mov	a,((_ss + 0x0006) + 1)
      0001EC 3F               [12]  902 	addc	a,r7
      0001ED FF               [12]  903 	mov	r7,a
      0001EE EE               [12]  904 	mov	a,r6
      0001EF C3               [12]  905 	clr	c
      0001F0 95*25            [12]  906 	subb	a,_mins
      0001F2 FE               [12]  907 	mov	r6,a
      0001F3 EF               [12]  908 	mov	a,r7
      0001F4 95*26            [12]  909 	subb	a,(_mins + 1)
      0001F6 FF               [12]  910 	mov	r7,a
      0001F7 EE               [12]  911 	mov	a,r6
      0001F8 C3               [12]  912 	clr	c
      0001F9 95*27            [12]  913 	subb	a,_maxs
      0001FB FE               [12]  914 	mov	r6,a
      0001FC EF               [12]  915 	mov	a,r7
      0001FD 95*28            [12]  916 	subb	a,(_maxs + 1)
      0001FF 8E*1B            [24]  917 	mov	_s,r6
      000201 C3               [12]  918 	clr	c
      000202 13               [12]  919 	rrc	a
      000203 C5*1B            [12]  920 	xch	a,_s
      000205 13               [12]  921 	rrc	a
      000206 C5*1B            [12]  922 	xch	a,_s
      000208 F5*1C            [12]  923 	mov	(_s + 1),a
                                    924 ;	main.c:133: if(s>=4000|flag==1)
      00020A C3               [12]  925 	clr	c
      00020B E5*1B            [12]  926 	mov	a,_s
      00020D 94 A0            [12]  927 	subb	a,#0xa0
      00020F E5*1C            [12]  928 	mov	a,(_s + 1)
      000211 94 0F            [12]  929 	subb	a,#0x0f
      000213 B3               [12]  930 	cpl	c
      000214 E4               [12]  931 	clr	a
      000215 33               [12]  932 	rlc	a
      000216 FF               [12]  933 	mov	r7,a
      000217 74 01            [12]  934 	mov	a,#0x01
      000219 B5*00 04         [24]  935 	cjne	a,_flag,00111$
      00021C 74 01            [12]  936 	mov	a,#0x01
      00021E 80 01            [24]  937 	sjmp	00112$
      000220                        938 00111$:
      000220 E4               [12]  939 	clr	a
      000221                        940 00112$:
      000221 FE               [12]  941 	mov	r6,a
      000222 4F               [12]  942 	orl	a,r7
      000223 60 12            [24]  943 	jz	00102$
                                    944 ;	main.c:135: flag = 0;
      000225 75*00 00         [24]  945 	mov	_flag,#0x00
                                    946 ;	main.c:136: Display[0] = 0x40;
      000228 75*11 40         [24]  947 	mov	_Display,#0x40
                                    948 ;	main.c:137: Display[1] = 0x40;
      00022B 75*12 40         [24]  949 	mov	(_Display + 0x0001),#0x40
                                    950 ;	main.c:138: Display[2] = 0x40;
      00022E 75*13 40         [24]  951 	mov	(_Display + 0x0002),#0x40
                                    952 ;	main.c:139: Display[3] = 0x40;
      000231 75*14 40         [24]  953 	mov	(_Display + 0x0003),#0x40
      000234 02r02rB6         [24]  954 	ljmp	00103$
      000237                        955 00102$:
                                    956 ;	main.c:143: Display[0] = smgduan[s/1000]|0x80;
      000237 75*00 E8         [24]  957 	mov	__divuint_PARM_2,#0xe8
      00023A 75*01 03         [24]  958 	mov	(__divuint_PARM_2 + 1),#0x03
      00023D 85*1B 82         [24]  959 	mov	dpl,_s
      000240 85*1C 83         [24]  960 	mov	dph,(_s + 1)
      000243 12r00r00         [24]  961 	lcall	__divuint
      000246 E5 82            [12]  962 	mov	a,dpl
      000248 24r01            [12]  963 	add	a,#_smgduan
      00024A F9               [12]  964 	mov	r1,a
      00024B 87 07            [24]  965 	mov	ar7,@r1
      00024D 43 07 80         [24]  966 	orl	ar7,#0x80
      000250 8F*11            [24]  967 	mov	_Display,r7
                                    968 ;	main.c:144: DisplayDigits();
      000252 12r00r2E         [24]  969 	lcall	_DisplayDigits
                                    970 ;	main.c:145: Display[1] = smgduan[s%1000/100];
      000255 75*00 E8         [24]  971 	mov	__moduint_PARM_2,#0xe8
      000258 75*01 03         [24]  972 	mov	(__moduint_PARM_2 + 1),#0x03
      00025B 85*1B 82         [24]  973 	mov	dpl,_s
      00025E 85*1C 83         [24]  974 	mov	dph,(_s + 1)
      000261 12r00r00         [24]  975 	lcall	__moduint
      000264 75*00 64         [24]  976 	mov	__divuint_PARM_2,#0x64
      000267 75*01 00         [24]  977 	mov	(__divuint_PARM_2 + 1),#0x00
      00026A 12r00r00         [24]  978 	lcall	__divuint
      00026D E5 82            [12]  979 	mov	a,dpl
      00026F 24r01            [12]  980 	add	a,#_smgduan
      000271 F9               [12]  981 	mov	r1,a
      000272 87 07            [24]  982 	mov	ar7,@r1
      000274 8F*12            [24]  983 	mov	(_Display + 0x0001),r7
                                    984 ;	main.c:146: DisplayDigits();
      000276 12r00r2E         [24]  985 	lcall	_DisplayDigits
                                    986 ;	main.c:147: Display[2] = smgduan[s%100/10];
      000279 75*00 64         [24]  987 	mov	__moduint_PARM_2,#0x64
      00027C 75*01 00         [24]  988 	mov	(__moduint_PARM_2 + 1),#0x00
      00027F 85*1B 82         [24]  989 	mov	dpl,_s
      000282 85*1C 83         [24]  990 	mov	dph,(_s + 1)
      000285 12r00r00         [24]  991 	lcall	__moduint
      000288 75*00 0A         [24]  992 	mov	__divuint_PARM_2,#0x0a
      00028B 75*01 00         [24]  993 	mov	(__divuint_PARM_2 + 1),#0x00
      00028E 12r00r00         [24]  994 	lcall	__divuint
      000291 E5 82            [12]  995 	mov	a,dpl
      000293 24r01            [12]  996 	add	a,#_smgduan
      000295 F9               [12]  997 	mov	r1,a
      000296 87 07            [24]  998 	mov	ar7,@r1
      000298 8F*13            [24]  999 	mov	(_Display + 0x0002),r7
                                   1000 ;	main.c:148: DisplayDigits();
      00029A 12r00r2E         [24] 1001 	lcall	_DisplayDigits
                                   1002 ;	main.c:149: Display[3] = smgduan[s%10];
      00029D 75*00 0A         [24] 1003 	mov	__moduint_PARM_2,#0x0a
      0002A0 75*01 00         [24] 1004 	mov	(__moduint_PARM_2 + 1),#0x00
      0002A3 85*1B 82         [24] 1005 	mov	dpl,_s
      0002A6 85*1C 83         [24] 1006 	mov	dph,(_s + 1)
      0002A9 12r00r00         [24] 1007 	lcall	__moduint
      0002AC E5 82            [12] 1008 	mov	a,dpl
      0002AE FE               [12] 1009 	mov	r6,a
      0002AF 24r01            [12] 1010 	add	a,#_smgduan
      0002B1 F9               [12] 1011 	mov	r1,a
      0002B2 87 07            [24] 1012 	mov	ar7,@r1
      0002B4 8F*14            [24] 1013 	mov	(_Display + 0x0003),r7
      0002B6                       1014 00103$:
                                   1015 ;	main.c:151: uchar di1 = s/1000 + '0';
      0002B6 75*00 E8         [24] 1016 	mov	__divuint_PARM_2,#0xe8
      0002B9 75*01 03         [24] 1017 	mov	(__divuint_PARM_2 + 1),#0x03
      0002BC 85*1B 82         [24] 1018 	mov	dpl,_s
      0002BF 85*1C 83         [24] 1019 	mov	dph,(_s + 1)
      0002C2 12r00r00         [24] 1020 	lcall	__divuint
      0002C5 AE 82            [24] 1021 	mov	r6,dpl
      0002C7 74 30            [12] 1022 	mov	a,#0x30
      0002C9 2E               [12] 1023 	add	a,r6
      0002CA FE               [12] 1024 	mov	r6,a
                                   1025 ;	main.c:152: uchar di2 = s%1000/100 + '0';
      0002CB 75*00 E8         [24] 1026 	mov	__moduint_PARM_2,#0xe8
      0002CE 75*01 03         [24] 1027 	mov	(__moduint_PARM_2 + 1),#0x03
      0002D1 85*1B 82         [24] 1028 	mov	dpl,_s
      0002D4 85*1C 83         [24] 1029 	mov	dph,(_s + 1)
      0002D7 C0 06            [24] 1030 	push	ar6
      0002D9 12r00r00         [24] 1031 	lcall	__moduint
      0002DC 75*00 64         [24] 1032 	mov	__divuint_PARM_2,#0x64
      0002DF 75*01 00         [24] 1033 	mov	(__divuint_PARM_2 + 1),#0x00
      0002E2 12r00r00         [24] 1034 	lcall	__divuint
      0002E5 AD 82            [24] 1035 	mov	r5,dpl
      0002E7 74 30            [12] 1036 	mov	a,#0x30
      0002E9 2D               [12] 1037 	add	a,r5
      0002EA FD               [12] 1038 	mov	r5,a
                                   1039 ;	main.c:153: uchar di3 = s%100/10 + '0';
      0002EB 75*00 64         [24] 1040 	mov	__moduint_PARM_2,#0x64
      0002EE 75*01 00         [24] 1041 	mov	(__moduint_PARM_2 + 1),#0x00
      0002F1 85*1B 82         [24] 1042 	mov	dpl,_s
      0002F4 85*1C 83         [24] 1043 	mov	dph,(_s + 1)
      0002F7 C0 05            [24] 1044 	push	ar5
      0002F9 12r00r00         [24] 1045 	lcall	__moduint
      0002FC 75*00 0A         [24] 1046 	mov	__divuint_PARM_2,#0x0a
      0002FF 75*01 00         [24] 1047 	mov	(__divuint_PARM_2 + 1),#0x00
      000302 12r00r00         [24] 1048 	lcall	__divuint
      000305 AC 82            [24] 1049 	mov	r4,dpl
      000307 74 30            [12] 1050 	mov	a,#0x30
      000309 2C               [12] 1051 	add	a,r4
      00030A FC               [12] 1052 	mov	r4,a
                                   1053 ;	main.c:154: uchar di4 = s%10 + '0';
      00030B 75*00 0A         [24] 1054 	mov	__moduint_PARM_2,#0x0a
      00030E 75*01 00         [24] 1055 	mov	(__moduint_PARM_2 + 1),#0x00
      000311 85*1B 82         [24] 1056 	mov	dpl,_s
      000314 85*1C 83         [24] 1057 	mov	dph,(_s + 1)
      000317 C0 04            [24] 1058 	push	ar4
      000319 12r00r00         [24] 1059 	lcall	__moduint
      00031C AB 82            [24] 1060 	mov	r3,dpl
      00031E 74 30            [12] 1061 	mov	a,#0x30
      000320 2B               [12] 1062 	add	a,r3
      000321 FB               [12] 1063 	mov	r3,a
                                   1064 ;	main.c:155: TH1 = SPEED;
      000322 75 8D FF         [24] 1065 	mov	_TH1,#0xff
                                   1066 ;	main.c:156: TL1 = SPEED;
      000325 75 8B FF         [24] 1067 	mov	_TL1,#0xff
                                   1068 ;	main.c:157: TR1 = 0;
                                   1069 ;	assignBit
      000328 C2 8E            [12] 1070 	clr	_TR1
                                   1071 ;	main.c:158: delay(1);
      00032A 90 00 01         [24] 1072 	mov	dptr,#0x0001
      00032D C0 03            [24] 1073 	push	ar3
      00032F 12r00r00         [24] 1074 	lcall	_delay
      000332 D0 03            [24] 1075 	pop	ar3
      000334 D0 04            [24] 1076 	pop	ar4
      000336 D0 05            [24] 1077 	pop	ar5
      000338 D0 06            [24] 1078 	pop	ar6
                                   1079 ;	main.c:159: TR1 = 1;
                                   1080 ;	assignBit
      00033A D2 8E            [12] 1081 	setb	_TR1
                                   1082 ;	main.c:160: Send_Str(disp0);
      00033C 90r00r29         [24] 1083 	mov	dptr,#_disp0
      00033F 75 F0 40         [24] 1084 	mov	b,#0x40
      000342 C0 06            [24] 1085 	push	ar6
      000344 C0 05            [24] 1086 	push	ar5
      000346 C0 04            [24] 1087 	push	ar4
      000348 C0 03            [24] 1088 	push	ar3
      00034A 12r00rE4         [24] 1089 	lcall	_Send_Str
      00034D D0 03            [24] 1090 	pop	ar3
      00034F D0 04            [24] 1091 	pop	ar4
      000351 D0 05            [24] 1092 	pop	ar5
      000353 D0 06            [24] 1093 	pop	ar6
                                   1094 ;	main.c:161: Send_Char(di1);
      000355 8E 82            [24] 1095 	mov	dpl,r6
      000357 C0 05            [24] 1096 	push	ar5
      000359 C0 04            [24] 1097 	push	ar4
      00035B C0 03            [24] 1098 	push	ar3
      00035D 12r00rD6         [24] 1099 	lcall	_Send_Char
      000360 D0 03            [24] 1100 	pop	ar3
      000362 D0 04            [24] 1101 	pop	ar4
      000364 D0 05            [24] 1102 	pop	ar5
                                   1103 ;	main.c:162: Send_Char(di2);
      000366 8D 82            [24] 1104 	mov	dpl,r5
      000368 C0 04            [24] 1105 	push	ar4
      00036A C0 03            [24] 1106 	push	ar3
      00036C 12r00rD6         [24] 1107 	lcall	_Send_Char
      00036F D0 03            [24] 1108 	pop	ar3
      000371 D0 04            [24] 1109 	pop	ar4
                                   1110 ;	main.c:163: Send_Char(di3);
      000373 8C 82            [24] 1111 	mov	dpl,r4
      000375 C0 03            [24] 1112 	push	ar3
      000377 12r00rD6         [24] 1113 	lcall	_Send_Char
      00037A D0 03            [24] 1114 	pop	ar3
                                   1115 ;	main.c:164: Send_Char(di4);
      00037C 8B 82            [24] 1116 	mov	dpl,r3
      00037E 12r00rD6         [24] 1117 	lcall	_Send_Char
                                   1118 ;	main.c:165: Send_Str(disp1);
      000381 90r00r33         [24] 1119 	mov	dptr,#_disp1
      000384 75 F0 40         [24] 1120 	mov	b,#0x40
      000387 12r00rE4         [24] 1121 	lcall	_Send_Str
                                   1122 ;	main.c:166: TR1 =0;
                                   1123 ;	assignBit
      00038A C2 8E            [12] 1124 	clr	_TR1
                                   1125 ;	main.c:167: }
      00038C 22               [24] 1126 	ret
                                   1127 ;------------------------------------------------------------
                                   1128 ;Allocation info for local variables in function 'main'
                                   1129 ;------------------------------------------------------------
                                   1130 ;k                         Allocated to registers r7 
                                   1131 ;i                         Allocated to registers r6 
                                   1132 ;------------------------------------------------------------
                                   1133 ;	main.c:168: void main()
                                   1134 ;	-----------------------------------------
                                   1135 ;	 function main
                                   1136 ;	-----------------------------------------
      00038D                       1137 _main:
                                   1138 ;	main.c:170: uchar k=0;
      00038D 7F 00            [12] 1139 	mov	r7,#0x00
                                   1140 ;	main.c:171: InitTimer();
      00038F C0 07            [24] 1141 	push	ar7
      000391 12r01r1C         [24] 1142 	lcall	_InitTimer
      000394 D0 07            [24] 1143 	pop	ar7
                                   1144 ;	main.c:172: while(1)
      000396                       1145 00113$:
                                   1146 ;	main.c:174: if(k>=4)
      000396 BF 04 00         [24] 1147 	cjne	r7,#0x04,00150$
      000399                       1148 00150$:
      000399 40 02            [24] 1149 	jc	00102$
                                   1150 ;	main.c:176: k = 0;
      00039B 7F 00            [12] 1151 	mov	r7,#0x00
      00039D                       1152 00102$:
                                   1153 ;	main.c:178: StartModule();
      00039D C0 07            [24] 1154 	push	ar7
      00039F 12r01r11         [24] 1155 	lcall	_StartModule
      0003A2 D0 07            [24] 1156 	pop	ar7
                                   1157 ;	main.c:179: while(!ECHO);
      0003A4                       1158 00103$:
      0003A4 30 92 FD         [24] 1159 	jnb	_P1_2,00103$
                                   1160 ;	main.c:180: TR0 = 1;
                                   1161 ;	assignBit
      0003A7 D2 8C            [12] 1162 	setb	_TR0
                                   1163 ;	main.c:181: while(ECHO);
      0003A9                       1164 00106$:
      0003A9 20 92 FD         [24] 1165 	jb	_P1_2,00106$
                                   1166 ;	main.c:182: TR0 = 0;
                                   1167 ;	assignBit
      0003AC C2 8C            [12] 1168 	clr	_TR0
                                   1169 ;	main.c:183: time = TH0*0x100 + TL0;
      0003AE AE 8C            [24] 1170 	mov	r6,_TH0
      0003B0 7D 00            [12] 1171 	mov	r5,#0x00
      0003B2 AB 8A            [24] 1172 	mov	r3,_TL0
      0003B4 7C 00            [12] 1173 	mov	r4,#0x00
      0003B6 EB               [12] 1174 	mov	a,r3
      0003B7 2D               [12] 1175 	add	a,r5
      0003B8 F5*19            [12] 1176 	mov	_time,a
      0003BA EC               [12] 1177 	mov	a,r4
      0003BB 3E               [12] 1178 	addc	a,r6
      0003BC F5*1A            [12] 1179 	mov	(_time + 1),a
                                   1180 ;	main.c:184: TH0 = 0;
                                   1181 ;	1-genFromRTrack replaced	mov	_TH0,#0x00
      0003BE 8D 8C            [24] 1182 	mov	_TH0,r5
                                   1183 ;	main.c:185: TH1 = 0;
                                   1184 ;	1-genFromRTrack replaced	mov	_TH1,#0x00
      0003C0 8D 8D            [24] 1185 	mov	_TH1,r5
                                   1186 ;	main.c:186: s = (time/58.0)*10;
      0003C2 85*19 82         [24] 1187 	mov	dpl,_time
      0003C5 85*1A 83         [24] 1188 	mov	dph,(_time + 1)
      0003C8 C0 07            [24] 1189 	push	ar7
      0003CA 12r00r00         [24] 1190 	lcall	___uint2fs
      0003CD AB 82            [24] 1191 	mov	r3,dpl
      0003CF AC 83            [24] 1192 	mov	r4,dph
      0003D1 AD F0            [24] 1193 	mov	r5,b
      0003D3 FE               [12] 1194 	mov	r6,a
      0003D4 E4               [12] 1195 	clr	a
      0003D5 C0 E0            [24] 1196 	push	acc
      0003D7 C0 E0            [24] 1197 	push	acc
      0003D9 74 68            [12] 1198 	mov	a,#0x68
      0003DB C0 E0            [24] 1199 	push	acc
      0003DD 74 42            [12] 1200 	mov	a,#0x42
      0003DF C0 E0            [24] 1201 	push	acc
      0003E1 8B 82            [24] 1202 	mov	dpl,r3
      0003E3 8C 83            [24] 1203 	mov	dph,r4
      0003E5 8D F0            [24] 1204 	mov	b,r5
      0003E7 EE               [12] 1205 	mov	a,r6
      0003E8 12r00r00         [24] 1206 	lcall	___fsdiv
      0003EB AB 82            [24] 1207 	mov	r3,dpl
      0003ED AC 83            [24] 1208 	mov	r4,dph
      0003EF AD F0            [24] 1209 	mov	r5,b
      0003F1 FE               [12] 1210 	mov	r6,a
      0003F2 E5 81            [12] 1211 	mov	a,sp
      0003F4 24 FC            [12] 1212 	add	a,#0xfc
      0003F6 F5 81            [12] 1213 	mov	sp,a
      0003F8 C0 03            [24] 1214 	push	ar3
      0003FA C0 04            [24] 1215 	push	ar4
      0003FC C0 05            [24] 1216 	push	ar5
      0003FE C0 06            [24] 1217 	push	ar6
      000400 90 00 00         [24] 1218 	mov	dptr,#0x0000
      000403 75 F0 20         [24] 1219 	mov	b,#0x20
      000406 74 41            [12] 1220 	mov	a,#0x41
      000408 12r00r00         [24] 1221 	lcall	___fsmul
      00040B AB 82            [24] 1222 	mov	r3,dpl
      00040D AC 83            [24] 1223 	mov	r4,dph
      00040F AD F0            [24] 1224 	mov	r5,b
      000411 FE               [12] 1225 	mov	r6,a
      000412 E5 81            [12] 1226 	mov	a,sp
      000414 24 FC            [12] 1227 	add	a,#0xfc
      000416 F5 81            [12] 1228 	mov	sp,a
      000418 8B 82            [24] 1229 	mov	dpl,r3
      00041A 8C 83            [24] 1230 	mov	dph,r4
      00041C 8D F0            [24] 1231 	mov	b,r5
      00041E EE               [12] 1232 	mov	a,r6
      00041F 12r00r00         [24] 1233 	lcall	___fs2uint
      000422 AD 82            [24] 1234 	mov	r5,dpl
      000424 AE 83            [24] 1235 	mov	r6,dph
      000426 D0 07            [24] 1236 	pop	ar7
      000428 8D*1B            [24] 1237 	mov	_s,r5
      00042A 8E*1C            [24] 1238 	mov	(_s + 1),r6
                                   1239 ;	main.c:187: ss[k] = (time/58.0)*10;
      00042C EF               [12] 1240 	mov	a,r7
      00042D 2F               [12] 1241 	add	a,r7
      00042E 24r1D            [12] 1242 	add	a,#_ss
      000430 F8               [12] 1243 	mov	r0,a
      000431 A6 05            [24] 1244 	mov	@r0,ar5
      000433 08               [12] 1245 	inc	r0
      000434 A6 06            [24] 1246 	mov	@r0,ar6
                                   1247 ;	main.c:188: k++;
      000436 0F               [12] 1248 	inc	r7
                                   1249 ;	main.c:205: Count();
      000437 C0 07            [24] 1250 	push	ar7
      000439 12r01rB6         [24] 1251 	lcall	_Count
      00043C D0 07            [24] 1252 	pop	ar7
                                   1253 ;	main.c:207: while(i--)
      00043E 7E 0F            [12] 1254 	mov	r6,#0x0f
      000440                       1255 00109$:
      000440 8E 05            [24] 1256 	mov	ar5,r6
      000442 1E               [12] 1257 	dec	r6
      000443 ED               [12] 1258 	mov	a,r5
      000444 60 0D            [24] 1259 	jz	00111$
                                   1260 ;	main.c:209: DisplayDigits();
      000446 C0 07            [24] 1261 	push	ar7
      000448 C0 06            [24] 1262 	push	ar6
      00044A 12r00r2E         [24] 1263 	lcall	_DisplayDigits
      00044D D0 06            [24] 1264 	pop	ar6
      00044F D0 07            [24] 1265 	pop	ar7
      000451 80 ED            [24] 1266 	sjmp	00109$
      000453                       1267 00111$:
                                   1268 ;	main.c:211: DelayXus(10);
      000453 90 00 0A         [24] 1269 	mov	dptr,#0x000a
      000456 C0 07            [24] 1270 	push	ar7
      000458 12r00r12         [24] 1271 	lcall	_DelayXus
      00045B D0 07            [24] 1272 	pop	ar7
                                   1273 ;	main.c:213: }
      00045D 02r03r96         [24] 1274 	ljmp	00113$
                                   1275 ;------------------------------------------------------------
                                   1276 ;Allocation info for local variables in function 'TimerOut'
                                   1277 ;------------------------------------------------------------
                                   1278 ;	main.c:215: void TimerOut() __interrupt 1
                                   1279 ;	-----------------------------------------
                                   1280 ;	 function TimerOut
                                   1281 ;	-----------------------------------------
      000460                       1282 _TimerOut:
                                   1283 ;	main.c:217: flag = 1;
      000460 75*00 01         [24] 1284 	mov	_flag,#0x01
                                   1285 ;	main.c:218: }
      000463 32               [24] 1286 	reti
                                   1287 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1288 ;	eliminated unneeded push/pop psw
                                   1289 ;	eliminated unneeded push/pop dpl
                                   1290 ;	eliminated unneeded push/pop dph
                                   1291 ;	eliminated unneeded push/pop b
                                   1292 ;	eliminated unneeded push/pop acc
                                   1293 	.area CSEG    (CODE)
                                   1294 	.area CONST   (CODE)
                                   1295 	.area XINIT   (CODE)
                                   1296 	.area CABS    (ABS,CODE)
